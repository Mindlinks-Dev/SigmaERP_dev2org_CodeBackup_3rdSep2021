@isTest(SeeAllData=true)
public class TriggertoGenerateAutoPOTest
{
     @isTest(SeeAllData=true)
    public static void TestingForMethod4()
    {   
         Test.startTest();     
        Schema.DescribeSObjectResult R = Account.SObjectType.getDescribe();
        List<Schema.RecordTypeInfo> RT = R.getRecordTypeInfos();
    //    StockRecevingControllerLtng.getStockInProductStatus();
        ID RID1 = Schema.SObjectType.Account.getRecordTypeInfosByName().get('Vendor').getRecordTypeId();
        Account  acc=new Account();
        acc.Status__c='Active';
        acc.Name='JTEST';
        acc.Type='Vendor';
        acc.RecordTypeId = RID1;
        acc.Email__c='abc@gmail.com';
        insert acc;
        System.assertEquals(acc.Name,'JTEST'); 
        //ID RID2 = Schema.SObjectType.Account.getRecordTypeInfosByName().get('Receiving Location').getRecordTypeId();
        Account  acc1=new Account();
        acc1.Name='JTEST1';
        acc1.Type='Location';
        //acc1.RecordTypeId = RID2;
        acc1.Email__c='abc@gmail.com';
        insert acc1;
        System.assertEquals(acc1.Name,'JTEST1'); 
        ID RID3 = Schema.SObjectType.Account.getRecordTypeInfosByName().get('Location').getRecordTypeId();
        Account  acc2=new Account();
        acc2.Name='JTEST2';
        acc2.Type='Location';
        acc2.RecordTypeId = RID3;
        insert acc2;
        System.assertEquals(acc2.Name,'JTEST2');
        Contact  con=new Contact();
        con.FirstName='JTEST';
        con.LastName='JTEST';
        con.AccountId=acc.Id;
        con.phone ='1234567890';
        insert con;
        System.assertEquals(con.FirstName,'JTEST');
        Default_Parameters__c  dp = new Default_Parameters__c (Name = 'Sample dp',Parent_Id__c = acc.Id,Default_Location__c=acc2.Id);
        dp.Inventory_Status__c='Reserve';
        insert dp;
        System.assertEquals(dp.Name,'Sample dp');
        Order_API__c oapi=new Order_API__c();
        oapi.Name ='orderapi';
        oapi.Subscription_Product__c=false;
        oapi.Subscription_Renewal__c=false;
        insert oapi;
        System.assertEquals(oapi.Subscription_Product__c,false);
        Time_Base_Inventory__c testTBI=new Time_Base_Inventory__c();
        testTBI.Name ='TimeBaseInventory';
        testTBI.Proposal_for_Products__c=false;
        insert testTBI;
        System.assertEquals(testTBI.Proposal_for_Products__c,false);
        Product2  pro=new  Product2();
        pro.Name='JMTEST';
        insert pro;
        System.assertEquals(pro.Name,'JMTEST');
         Vendor_Product__c vp2=   new Vendor_Product__c();
        vp2.Account_Name__c = acc.id;
        vp2.Product_Name__c = pro.id;
        vp2.Buying_Price__c = 100;
        vp2.Discount__c = 10;
        vp2.Quantity__c = 1;
        vp2.Is_Preferred__c=true;
        insert vp2;
        Lot__c lot = new Lot__c();
        lot.Lot_Name__c = 'Test Lot';
        lot.Product__c = pro.Id;
        lot.Quantity__c = 10;
        lot.Created_Date__c=System.today();
        lot.Expiry_Date__c=System.today();
        insert lot;
        System.assertEquals(lot.Lot_Name__c,'Test Lot');
        Lot_Product__c lotProd = new Lot_Product__c();
        lotProd.Lot__c = lot.Id;
        lotProd.Product__c = pro.Id;
        lotProd.Quantity__c = 10;
        insert lotProd;
        System.assertEquals(lotProd.Quantity__c,10);
        Purchase_Order__c  pord=new  Purchase_Order__c();
        pord.Product_Supplier__c=acc.Id;
        pord.Order_Date__c=date.today();
        pord.Status__c='Open';
        insert pord;
        System.assertEquals(pord.Status__c,'Open');
        Purchase_Order_Product__c porderp=new  Purchase_Order_Product__c();
        porderp.Purchase_Order__c=pord.Id;
        porderp.Status__c='Open';
        porderp.Quantity__c='10';
        porderp.Expected_Delivery_Date__c=date.today();  
        porderp.Buying_Price__c=89;
        insert porderp;
        System.assertEquals(porderp.Status__c,'Open');
        Stock_In_Product__c  sInPro=new Stock_In_Product__c();
        sInPro.Quantity_Received__c=3;
        sInPro.Returned_Quantity__c=0;
        sInPro.Putaway_location__c=acc2.Id;
        sInPro.Status__c='Verified';
        sInPro.Return_Quantity_Comment__c='JMTEST';
        sInPro.Lot__c = lot.Id;
       
        
        Stock_In__c stIn=new Stock_In__c();
        stIn.Delivery_Person__c=con.Id;
        stIn.Received_Date_Time__c=date.today();
        stIn.Location__c=acc1.Id;
        stIn.Status__c='Open';
        stIn.Truck_Number__c='';
        stIn.Vendor__c=acc.Id;
        Stock_In__c stIn1=new Stock_In__c();
        stIn1.Delivery_Person__c=con.Id;
        stIn1.Received_Date_Time__c=date.today();
        stIn1.Location__c=acc1.Id;
        stIn1.Status__c='Open';
        stIn1.Truck_Number__c='';
        stIn1.Vendor__c=acc.Id;
        insert stIn1;
        System.assertEquals(stIn1.Status__c,'Open');
         sInPro.Product__c=pro.id;
         sInPro.Stock_In__c=stIn1.id;
         sInPro.Pur_Order__c=pord.id;
         sInPro.Purchase_Order__c=porderp.id;
        insert sInPro;
        System.assertEquals(sInPro.Status__c,'Verified');
        Product_Serial_Number__c  proPSN=new Product_Serial_Number__c();
        proPSN.Product_Code__c=pro.Id;
        proPSN.Stock_Receiving_Product__c=sInPro.Id;
        proPSN.Serial_Number__c='4454454';
        insert proPSN;
        System.assertEquals(proPSN.Stock_Receiving_Product__c,sInPro.Id);
       // string RIDLoc = [Select Id From RecordType Where SobjectType = 'Account' and Name = 'Location'].id;
        ID RIDLoc = Schema.SObjectType.Account.getRecordTypeInfosByName().get('Location').getRecordTypeId();
        Account locacc = new Account();
        locacc.Name = 'Test Location';
        locacc.Type = 'Location';
        locacc.RecordTypeId = RIDLoc;
        insert locacc;
        System.assertequals('Test Location',locacc.Name);
        Inventory_Location__c il = new Inventory_Location__c();
        il.Location__c = locacc.Id;
        insert il;
        System.assertequals(il.Location__c,locacc.Id);
        Order_Usage__c ou1=new Order_Usage__c();
        ou1.Name='orderusage';
        ou1.Sigma_order__c=true;
        ou1.Allocation_in_Sales_Order__c=true;
        ou1.Allocation_in_Picking__c=false;
        ou1.Auto_Allocate_in_picking__c=false;
        insert ou1;
        System.assertEquals(ou1.Allocation_in_Sales_Order__c,true);
        /////////////////////////////
        Id standardPriceBookId = Test.getStandardPricebookId();
        Id RIDloc2 = Schema.SObjectType.Account.getRecordTypeInfosByName().get('Location').getRecordTypeId();
        Account testaccloc = new Account(Name= 'Test Merchant 46', Type = 'Location',Email__c='prashanth@gmail.com',Web_Order_Type__c= 'Percentage', Web_Order_Value__c =40,  RecordtypeId = RIDloc2 );
        insert testaccloc ;
        System.assertEquals(testaccloc.name, 'Test Merchant 46');
        Account testaccmerchant = new Account(Name= 'Test Merchant 45', Type = 'Merchant',Email__c='prashanth@gmail.com', Web_Order_Value__c =40);
        insert testaccmerchant;
        System.assertEquals(testaccmerchant.name, 'Test Merchant 45');   
        Account testaccmerchantNew = new Account(Name= 'NewTest', Type = 'store',Email__c='prashanth@gmail.com', Web_Order_Value__c =40);
        insert testaccmerchantNew;
        System.assertEquals(testaccmerchantNew.name, 'NewTest');    
        Id RIDCus = Schema.SObjectType.Account.getRecordTypeInfosByName().get('Customer').getRecordTypeId();
        Account customerAccount= new Account(Name= 'Test Merchant 5', State__c='Alabama',Country__c='USA',Type = 'Customer',Email__c='raghavendrahgr@gmail.com',Web_Order_Type__c= 'Percentage', Web_Order_Value__c =40,Currency_code__c='GBP', RecordTypeId = RIDCus);
        insert customerAccount;
        System.assertEquals(customerAccount.name, 'Test Merchant 5');
        Account packl= new Account();
        packl.Name = 'Test Packaged Location';
        packl.ShippingStreet = 'Test Street';
        packl.ShippingCity = 'Test City';
        packl.ShippingState = 'Test State';
        packl.ShippingPostalCode = 'Test Code';   
        packl.ShippingCountry  = 'Test Country';
        packl.Email__c='abc@gmail.com';
        //packl.RecordTypeid = Schema.SObjectType.Account.getRecordTypeInfosByName().get('Packaged Location').getRecordTypeId();
        insert packl;
        System.assertEquals(packl.name, 'Test Packaged Location');
        Contact con1     = new Contact();
        con1.LastName = 'Test';
        con1.Phone='1234567890';
        insert con1;
        System.assertEquals(con1.LastName, 'Test');
        Inventory_Location__c  IL1 = new Inventory_Location__c();
        IL1.Location__c =testaccloc.Id ;
        insert IL1; 
        System.assertEquals(IL1.Location__c,testaccloc.Id);
        Default_Parameters__c  defparam = new Default_Parameters__c ();
        defparam.Parent_Id__c= testaccmerchant.id;
        defparam.Inventory_Status__c='Reserve';
        defparam.Name = 'TestDefaultParam';
        defparam.Default_Location__c =IL.ID; 
        insert defparam;
        System.assertEquals(defparam.Name,'TestDefaultParam'); 
        Id RIDBOM = Schema.SObjectType.Product2.getRecordTypeInfosByName().get('BOM').getRecordTypeId();
        Product2 prod = new Product2();
        prod.Name='test';
        prod.Product_Description__c='test description';
        prod.Product_Price__c=324.34;
        prod.Max_Discount__c=30;
        prod.Product_Weight__c = 3 ;
        prod.SKU__c = 'testing';
        prod.Type__c = 'BOM';
        prod.RecordtypeId = RIDBOM;
        insert prod;
        System.assertEquals(prod.name, 'test');
        Account Ven= new Account();
        Ven.Name = 'Test Auto Vendor';
        Ven.ShippingStreet = 'Test Street';
        Ven.ShippingCity = 'Test City';
        Ven.ShippingState = 'Test State';
        Ven.ShippingPostalCode = 'Test Code';   
        Ven.ShippingCountry  = 'Test Country';
        Ven.Email__c='abc@gmail.com';
        Ven.RecordTypeid = Schema.SObjectType.Account.getRecordTypeInfosByName().get('Vendor').getRecordTypeId(); 
        insert Ven; 
        System.assertEquals(Ven.Name, 'Test Auto Vendor');
        Lot__c lot1 = new Lot__c();
        lot1.Lot_Name__c='TestLot';
        lot1.Created_Date__c = Date.Today()-1;
        lot1.Expiry_Date__c = Date.Today();
        lot1.Product__c=prod.id;
        insert lot1;
        system.assertEquals('TestLot', lot1.Lot_Name__c);
        Vendor_Product__c vp=   new Vendor_Product__c();
        vp.Account_Name__c = Ven.id;
        vp.Product_Name__c = prod.id;
        vp.Buying_Price__c = 100;
        vp.Discount__c = 10;
        vp.Quantity__c = 1;
        vp.Is_Preferred__c=true;
        insert vp;
        System.assertEquals(vp.Account_Name__c,Ven.id);// added
        Inventory_Location_Product__c  ILP = new Inventory_Location_Product__c ();
        ILP.Inventory_Location__c =IL.ID;
        ILP.Products__c = prod.Id;
        insert ILP; 
        System.assertEquals(ILP.Inventory_Location__c,IL.ID);
        Inventory_Location_Product_Line_Item__c  ILPLI = new Inventory_Location_Product_Line_Item__c ();
        ILPLI.Inventory_Location_Product__c = ILP.Id;
        insert ILPLI;
        Inventory__c inv=new Inventory__c();
        inv.Total_Qty__c=10;
        inv.Available_Qty__c=10;
        insert inv;
       update inv;
        Test.stopTest();
    }
}