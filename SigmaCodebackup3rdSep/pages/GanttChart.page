<apex:page extensions="ganttcontroller" standardController="Project2__c"  standardStylesheets="false" showHeader="false" action="{!getProjDatatest}"> 
    <head> 
    
        <!-- Loading From DHTMLX Library -->
        <apex:stylesheet value="{!GanttLibrary}/dhtmlxgantt.css"/>
        <apex:includeScript value="{!GanttLibrary}/dhtmlxgantt.js"/>  
        <apex:stylesheet value="{!GanttLibrary}/jquery_multiselect.css"/>
        <apex:includeScript value="{!GanttLibrary}/jquery_multiselect.js"/>
        
         <!-- Loading From Sigma Local Library -->
        <apex:stylesheet value="{!URLFOR($Resource.SigmaLibraries, '/style.css')}"/>
        <apex:includeScript value="{!URLFOR($Resource.SigmaLibraries, '/jquery-3.5.1.min.js')}"/>
        <apex:stylesheet value="{!URLFOR($Resource.SigmaLibraries, '/chosen.css')}"/>
        <apex:includeScript value="{!URLFOR($Resource.SigmaLibraries, '/chosen.jquery.js')}"/>
         <!-- Export files-->
        <apex:includeScript value="{!URLFOR($Resource.SigmaLibraries, '/api.js')}"/>
     	<!--  <script type="text/javascript" src="https://export.dhtmlx.com/gantt/api.js?v=7.0.11"/>-->
         <script>
        
        
        <!-- instead of refering urls we can use Pluggins-->
       gantt.plugins({
            auto_scheduling: true
        });
        gantt.plugins({
            keyboard_navigation: true
        });
       
        gantt.plugins({
            critical_path: true
        });
        gantt.plugins({
            fullscreen: true
        });
        gantt.plugins({
            marker: true
        });
         gantt.plugins({
            multiselect: true
        });
        gantt.plugins({
            quick_info: true
        });
        gantt.plugins({
            tooltip: true
        });
        gantt.plugins({
            undo: true
        });
	gantt.init('gantt_here');
       
gantt.config.date_grid = "%D %m/%d/%Y";
            gantt.config.layout = {
            css: "gantt_container",
            cols: [
                {
                    width:900,
                    min_width: 100,
                    rows:[
                        {view: "grid", scrollX: "gridScroll", scrollable: true, scrollY: "scrollVer"},
                        {view: "scrollbar", id: "gridScroll", group:"horizontal"}
                    ]
                },
                {resizer: true, width: 1},
                {
                    rows:[
                        {view: "timeline", scrollX: "scrollHor", scrollY: "scrollVer"},
                        {view: "scrollbar", id: "scrollHor", group:"horizontal"}
                    ]
                },
                {view: "scrollbar", id: "scrollVer"}
            ]
            };

             gantt.init('gantt_here');
            </script>
        <style>
            html, body {
            padding: 0px;
            margin: 0px;
            height: 100%;
            }
             
            .Taskcolor{
             background-color:#c8cbce!important; 
             font-weight:bold!important;
             }
            
            .gantt_grid_scale .gantt_grid_head_cell,
            .gantt_task .gantt_task_scale .gantt_scale_cell {
            font-weight: bold;
            font-size: 14px;
            color: rgba(0, 0, 0, 0.7);
            }
            
            .resource_marker{
            text-align: center;
            }
            .resource_marker div{
            width: 28px;
            height: 28px;
            line-height: 29px;
            display: inline-block;
            
            color: #FFF;
            margin: 3px;
            }
            .resource_marker.workday_ok div {
            border-radius: 15px;
            background: #51c185;
            }
            
            .resource_marker.workday_over div{
            border-radius: 3px;
            background: #ff8686;
            }
            
            .folder_row {
            font-weight: bold;
            }
            
            .highlighted_resource,
            .highlighted_resource.odd
            {
            background-color: rgba(255, 251, 224, 0.6);
            }
            
            .resource-controls .gantt_layout_content{
            padding: 7px;
            overflow: hidden;
            }
            .resource-controls label{
            margin: 0 10px;
            vertical-align: bottom;
            display: inline-block;
            color: #3e3e3e;
            padding: 2px;
            transition: box-shadow 0.2s;
            }
            
            .resource-controls label:hover{
            box-shadow: 0 2px rgba(84, 147, 255, 0.42);
            }
            
            .resource-controls label.active,
            .resource-controls label.active:hover
            {
            box-shadow: 0 2px #5493ffae;
            color: #1f1f1f;
            }
            
            .resource-controls input{
            vertical-align: top;
            }
            
            .gantt_task_cell.week_end {
            background-color: #e8e8e87d;
            }
            
            .gantt_task_row.gantt_selected .gantt_task_cell.week_end {
            background-color: #e8e8e87d !important;
            }
            
            
            .group_row,
            .group_row.odd,
            .gantt_task_row.group_row{
            background-color: rgba(232, 232, 232, 0.6);
            }
            
            .owner-label{
            width: 20px;
            height: 20px;
            line-height: 20px;
            font-size: 12px;
            display: inline-block;
            border: 1px solid #cccccc;
            border-radius: 25px;
            background: #e6e6e6;
            color: #6f6f6f;
            margin: 0 3px;
            font-weight: bold;
            }
            
        </style>
         <style>
        html, body {
            height: 100%;
            padding: 0px;
            margin: 0px;
            overflow: hidden;
        }

        .gantt_task_line.milestone_task .gantt_task_content{
          left: 28px;
          width:20px !important;
          height: 20px !important;
          display: inline-block;
          background: #d33daf;
          color:#d33daf;
          visibility: visible !important;
          border: 1px solid #61164f !important;
          transform: rotate(45deg);
          box-sizing: border-box;
        }
      
        .gantt_task_line.milestone_task {
          border: none;
          width: 70px !important;
          height: 20px !important;
          background-color: rgba(0,0,0,0) !important;
          box-shadow: none;
        }
      
      .gantt_task_line.milestone_task .gantt_task_progress_wrapper,
      .gantt_task_line.milestone_task .gantt_task_progress_drag,
      .milestone_task .gantt_task_drag.task_right.task_end_date,
      .milestone_task .gantt_task_drag.task_left.task_start_date
      {
        display: none;
      }
    </style>
        <style type="text/css">
            .gantt_resource_amount_input{display:none;}
            .slds-scope .slds-icon-text-default{fill:rgb(0, 109, 204);}
            .link{position:relative;top:3px;}
            html, body {padding: 0px;margin: 0px;height: 100%;}
            
            .gantt_grid_scale .gantt_grid_head_cell,.gantt_task .gantt_task_scale .gantt_scale_cell {font-weight: bold;font-size: 14px;color: rgba(0, 0, 0, 0.7);}
            .gantt-error{display:none !important;}
            
            .gantt_cal_larea textarea{height:24px !important;}
            .gantt_cal_ltext{height:26px !important;}
            
            .gantt_cal_ltext label{display:block !important;}
            .gantt_grid_scale .gantt_grid_head_cell{border-right:1px solid #cecece !important;}
            <!--.gantt_grid_scale .gantt_grid_head_cell:nth-child(2){border-right:0px solid #cecece !important;}
            .gantt_cal_ltext:nth-child(8){overflow-y:scroll !important;height:80px !important;border: 1px solid #cecece;width: 99.9%;margin: auto;}-->
            .gantt_cal_lsection{padding:5px 0 5px 10px !important;}
            .slds-scope input[type=checkbox], .slds-scope input[type=radio]{position:relative !important;top:3px !important;}
            .gantt_grid_data .gantt_cell{text-align:center;}
            .gantt_cal_cover{z-index:0 !important;}
            .gantt_cal_light{height: 446px !important;top:0 !important;}
            .chosen-container-multi .chosen-choices li.search-choice .search-choice-close{background-image: url({!URLFOR($Resource.close_icon)}) !important; width: 15px !important;background-size: 10px !important;background-position: 3px 0 !important;}
            .gantt_cal_larea{height: 366px !important;overflow-y: scroll !important;padding-bottom:20px !important;}
            .column_icon{
            width: 18px;
            height: 86%;
            display: inline-block;
            background-repeat: no-repeat;
            background-position: center center;
            vertical-align: top;
            border-radius: 50%;
            }
            .slds-notify_container{z-index: 100000 !important }
            .circle{    display: inline-block;width: 8px;height: 8px;margin-right: 5px;border-radius: 8px;position:relative;top: 1px;}
            .circle-main{font-size: 74%;position: relative;float: right;margin-top: -24px;margin-right: 100px;}
            .red{background:#c00000;}
            .yellow{background:#ffcc00;}
            .blue{background:#3399ff;}
            .green{background:#00b050;}
        </style> 
        
      
         
    </head>
      
     <body> 
        <apex:slds />
        
        <div class="slds-spinner_container" id="spinner" style="display:none;">
            <div role="status" class="slds-spinner slds-spinner_brand slds-spinner_medium">
                <span class="slds-assistive-text">Loading</span>
                <div class="slds-spinner__dot-a"></div>
                <div class="slds-spinner__dot-b"></div>
            </div>
        </div>
        
        <apex:form >
            <p><apex:outputText value="{!success}" id="showstate" /></p>
            <div class="slds-page-header slds-m-around_small slds-p-around_small">
                <div class="slds-page-header__row">
                    <div class="slds-page-header__col-title">
                        <div class="slds-media">
                            <div class="slds-media__figure">
                                <span class="slds-icon_container slds-icon-standard-agent-session">
                                    <svg class="slds-icon slds-icon--large">
                                        <use href="{!URLFOR($Resource.SLDS, '/assets/icons/custom-sprite/svg/symbols.svg#custom18')}"></use>
                                    </svg>
                                </span>
                            </div>
                            <div class="slds-media__body">
                                <div class="slds-page-header__name1">
                                    <div class="slds-page-header__name-title">
                                        <h1>
                                            <span class="slds-page-header__title">Project Management</span>
                                            <span class="slds-page-header__title1 slds-truncate"><b> Project Name :</b><apex:outputField value="{!Project2__c.Name}"/> &nbsp;&nbsp;&nbsp;</span> 
                                           <!-- <span class="slds-page-header__title1 slds-truncate"><b> Account Name :</b><apex:outputField value="{!Project2__c.Account__r.Name}"/> &nbsp;&nbsp;&nbsp;</span> -->
                                            <span class="slds-page-header__title1 slds-truncate"><b> Start Date : </b> <apex:outputText value="{0,date,MM/dd/yyyy}"> 
                                                <apex:param value="{!Project2__c.Start_Date__c}" /> 
                                                </apex:outputText> </span>
                                            
                                             <span class="slds-page-header__title1 slds-truncate circle-main">
                                                <p><span class="red circle"> </span>Near to Exceed Deadline</p>
                                                <p><span class="yellow circle"> </span>Approaching Deadline</p>
                                                <p><span class="blue circle"> </span>Far Off Deadline</p>
                                                <p><span class="green circle"> </span>Completed</p>                        
                                            </span>
                                        </h1>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="slds-page-header__col-actions">
                        <div class="slds-page-header__controls">
                            <div class="slds-page-header__control">
                                <ul class="slds-button-group-list">
                                    <li>
                                       <apex:outputpanel rendered="{!Project2__c.Template__c == true}"> 
                                        <apex:commandButton styleClass="slds-button slds-button_brand slds-m-top_x-small" value="Save" onclick="savechart('issavetrue')" onComplete="saveSuccess();"  />
                                        <apex:commandButton styleClass="slds-button slds-button_brand slds-m-top_x-small" value="Save & Close" onclick="savechart('issaveandclose')" onComplete="save_close_Success();"  />
                                        <button type="button" class="slds-button slds-button_brand slds-m-top_x-small" onclick="back()">Cancel</button>
                                        </apex:outputpanel>
                                        
                                        <apex:outputpanel rendered="{!Project2__c.Template__c == false}"> 
                                        <apex:commandButton styleClass="slds-button slds-button_brand slds-m-top_x-small" value="Save" onclick="savechart('issavetrue')" onComplete="saveSuccess();"  />
                                        <apex:commandButton styleClass="slds-button slds-button_brand slds-m-top_x-small" value="Save & Close" onclick="savechart('issaveandclose')" onComplete="save_close_Success();"  />
                                        <button type="button" class="slds-button slds-button_brand slds-m-top_x-small" onclick="back()">Cancel</button>
                                        <apex:commandButton styleClass="slds-button slds-button_brand slds-m-top_x-small" value="Save as Template" onclick="modal('{!RHSValuesForFields}')" onComplete="showTemplateModal();"/>
                                        </apex:outputpanel>
                                    </li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </apex:form>
        <div class="header gantt-demo-header">
            <ul class="gantt-controls">
                <li class="gantt-menu-item gantt-menu-item-last"><a data-action="collapseAll"><svg class="slds-icon slds-icon-text-default slds-icon--x-small"><use href="{!URLFOR($Resource.SLDS, '/assets/icons/utility-sprite/svg/symbols.svg#chevronup')}"></use></svg> Collapse All</a></li>
                <li class="gantt-menu-item gantt-menu-item-last"><a data-action="expandAll"><svg class="slds-icon slds-icon-text-default slds-icon--x-small"><use href="{!URLFOR($Resource.SLDS, '/assets/icons/utility-sprite/svg/symbols.svg#chevrondown')}"></use></svg> Expand All</a></li>
                <!--<li class="gantt-menu-item gantt-menu-item-last"><a data-action="undo"><svg class="slds-icon slds-icon-text-default slds-icon--x-small"><use href="{!URLFOR($Resource.SLDS, '/assets/icons/utility-sprite/svg/symbols.svg#undo')}"></use></svg> Undo</a></li>
                <li class="gantt-menu-item gantt-menu-item-last"><a data-action="redo"><svg class="slds-icon slds-icon-text-default slds-icon--x-small"><use href="{!URLFOR($Resource.SLDS, '/assets/icons/utility-sprite/svg/symbols.svg#redo')}"></use></svg> Redo</a></li>
               --> 
<li class="gantt-menu-item gantt-menu-item-last"><a data-action="toggleCriticalPath"><svg class="slds-icon slds-icon-text-default slds-icon--x-small"><use href="{!URLFOR($Resource.SLDS, '/assets/icons/utility-sprite/svg/symbols.svg#dash')}"></use></svg> Critical Path</a></li>
               <!-- <li class="gantt-menu-item gantt-menu-item-last"><a data-action="toggleAutoScheduling"><svg class="slds-icon slds-icon-text-default slds-icon--x-small"><use href="{!URLFOR($Resource.SLDS, '/assets/icons/utility-sprite/svg/symbols.svg#refresh')}"></use></svg> Auto Scheduling</a></li>
                <li class="gantt-menu-item gantt-menu-item-last"><a data-action="toggleDelete"><svg class="slds-icon slds-icon-text-default slds-icon--x-small"><use href="{!URLFOR($Resource.SLDS, '/assets/icons/utility-sprite/svg/symbols.svg#delete')}"></use></svg> Delete All</a></li>-->
                
             <!--   <li class="gantt-menu-item gantt-menu-item-right"><a data-action="fullscreen"><svg class="slds-icon slds-icon-text-default slds-icon--x-small"><use href="{!URLFOR($Resource.SLDS, '/assets/icons/utility-sprite/svg/symbols.svg#desktop')}"></use></svg> Fullscreen</a></li>-->
                <li class="gantt-menu-item gantt-menu-item-right gantt-menu-item-last"><a><svg class="slds-icon slds-icon-text-default slds-icon--x-small"><use href="{!URLFOR($Resource.SLDS, '/assets/icons/utility-sprite/svg/symbols.svg#share')}"></use></svg> Export Files</a>
                    <ul class="gantt-controls">
                         <li class="gantt-menu-item"><a data-action="toExcel"><svg class="slds-icon slds-icon-text-default slds-icon--x-small"><use href="{!URLFOR($Resource.SLDS, '/assets/icons/utility-sprite/svg/symbols.svg#file')}"></use></svg> Excel</a></li>
                        <li class="gantt-menu-item"><a data-action="toMSProject"><svg class="slds-icon slds-icon-text-default slds-icon--x-small"><use href="{!URLFOR($Resource.SLDS, '/assets/icons/utility-sprite/svg/symbols.svg#file')}"></use></svg> MS Project</a></li>
                    </ul>
                </li>
                <li class="gantt-menu-item gantt-menu-item-right gantt-menu-item-last"><a data-action="zoomToFit"><svg class="slds-icon slds-icon-text-default slds-icon--x-small"><use href="{!URLFOR($Resource.SLDS, '/assets/icons/utility-sprite/svg/symbols.svg#zoomin')}"></use></svg> Zoom to Fit</a></li>
                
            </ul>
        </div>
        <div id="gantt_here" style='width:100%; height:70%;'>
        </div> 
        <script> 
        gantt.config.work_time = true;
        gantt.config.correct_work_time = true;
        gantt.keys.edit_save = 32;
        gantt.config.keyboard_navigation_cells = true;
        gantt.config.auto_scheduling = true;
        gantt.config.auto_scheduling_initial = true;
        //gantt.config.auto_scheduling_strict = true;
        gantt.config.row_height = 23;
        gantt.config.fit_tasks = true;
        gantt.config.show_unscheduled = true;
        gantt.config.open_tree_initially = true;
        gantt.config.order_branch = true;
        gantt.config.order_branch_free = true;
        gantt.config.cascade_delete = true;
        gantt.config.date_grid = "%D %m/%d/%Y";
        // added for performance increase
        gantt.config.show_task_cells = false;
        //gantt.config.static_background = true;
        gantt.config.branch_loading = true;
        gantt.config.smart_scales = true;
         var tempche;
         var tempflag = '{!ProjectTempflag}';   //changes done on 17-03-2020 (To prevent Stored XSS issue in code scann)    
         var isnewtask=false;                   
         var startdate = '{!StartDate}'; //changes done on 17-03-2020 (after To prevent Stored XSS issue in code scann)
         var TempLookup = '{!ProjectTemplate}';         // changes by manage package on 17-12-2019
         var EffectiveDate = '{!EffectiveDate}';
        
         
          console.log('startdate'+startdate);
         console.log('TempLookup'+TempLookup);
          console.log('EffectiveDat'+EffectiveDate);
         
        gantt.config.start_date = startdate;
        //gantt.config.project_start = startdate;
        function formatEndDate(task){
            var date;
            if(task.type == 'milestone'){
                
                date = gantt.calculateEndDate({start_date:task.end_date, duration:0, task:task});
                return gantt.templates.date_grid(date, task);
            }
            else if(task.type == 'project'){
                var milestones = [];
                var maxDate = null;
                
                gantt.eachTask(function(child){
                    if (child.type == 'milestone') {
                        milestones.push(child.id);
                    }
                    if (+child.end_date > +maxDate) 
                        maxDate = child.end_date;},
               task.id);
                
                for (var i = 0; i < milestones.length; i++) {
                    date = gantt.getTask(milestones[i]).end_date;
                    if (+date == +maxDate) return gantt.templates.date_grid(date, task);
                }
                date = gantt.calculateEndDate({start_date:task.end_date, duration:-1, task:task});
                return gantt.templates.date_grid(date, task);
            }
            else{
                date = gantt.calculateEndDate({start_date:task.end_date, duration:-1, task:task});
                return gantt.templates.date_grid(date, task);
            }
            
        }
        var resourcesStore = gantt.createDatastore({
            name: gantt.config.resource_store,
            type: "treeDatastore",
            initItem: function (item) {
                item.parent = item.parent || gantt.config.root_id;
                item[gantt.config.resource_property] = item.parent;
                item.open = true;
                return item;
            }
        });
        
         var holiday_data = [];
        <apex:repeat value="{!holidayData}" var="holi">
           
            var holidayDate = new Date('{!holi.ActivityDate}');
        holiday_data.push(new Date(holidayDate.getFullYear(),holidayDate.getMonth(),holidayDate.getDate()));
        </apex:repeat>
        console.log('holiday_data>>>'+holiday_data);
        for (var i = 0; i < holiday_data.length; i++) {
            gantt.setWorkTime({
                date: holiday_data[i],
                hours: false
            });
        }
       
        
        var ifcondition = "{!ifcondition}";
        var projrolelist =[
        <apex:repeat value="{!IPMupdateList}" var="ProjRole">
            {
            roleid : "{!ProjRole.id}",
            rolestring: "{!ProjRole.Roles__c}",
            },
            </apex:repeat>
            ]
        
        var temprolelist =[
        <apex:repeat value="{!IPMRoleIdList}" var="TempRoles">
            {
            resid : "{!TempRoles.id}",
            resstring: "{!TempRoles.Roles__c}",
            },
            </apex:repeat>
            ]
       
        var records = [
        <apex:repeat value="{!thousandBlocks}" var="proj">
            <apex:repeat value="{!proj.cases}" var="aflA">
           {
            
            sfdcid : "{!aflA.id}",
            wbs : "{!HTMLENCODE(aflA.WBS_Code__c)}",
            Duration :  "{!aflA.Duration__c}",
            text :  "{!HTMLENCODE(aflA.Project_Task_Name__c)}",
            start_date : "{!aflA.Start_Date__c}",
            end_date: "{!aflA.End_Date__c}",
            priority : "{!HTMLENCODE(aflA.priority__c)}",
            predecessor: "{!HTMLENCODE(aflA.predecessors__c)}", 
            projId : "{!HTMLENCODE(aflA.Project_Task_Id__c)}",
            parentid:"{!HTMLENCODE(aflA.Parent__c)}",  
            target:"{!HTMLENCODE(aflA.target__c)}",
            source:"{!HTMLENCODE(aflA.source__c)}",
            type:"{!HTMLENCODE(aflA.type__c)}",
            linkid:"{!HTMLENCODE(aflA.linkId__c)}",
            owner_id:"{!HTMLENCODE(aflA.Resource_Id__c)}",
            Owner:"{!HTMLENCODE(aflA.Owner__c)}",
            lag :"{!HTMLENCODE(aflA.lag__c)}",
            projtype : "{!HTMLENCODE(aflA.Project_Type__c)}",
            RowNum : "{!aflA.Row_Number__c}",
            checked:"{!aflA.Checked__c}",
            progress:"{!aflA.Progress__c}",
            PR_Name :"{!HTMLENCODE(aflA.sigmaerpdev2__Project__r.Project2__c)}",
            actual_finish_date :"{!aflA.Actual_Finish__c}",
            Notes :"{!HTMLENCODE(aflA.Notes__c)}",
            dashboard : "{!aflA.Dashboard__c}",
            split : {!aflA.Mark_as_Milestone__c}?"[true]":"[false]",
            },
            
            </apex:repeat>
            </apex:repeat>
       ];
      var ganttData = {
            data: [],
            links: []
        };
        var resourceID ='';
        function RoleToResource(rolestng)
        {
            for(var rr=0; rr<projrolelist.length ; rr++)
            {
                if(projrolelist[rr].rolestring == rolestng)
                {
                    if(resourceID == 'null' || resourceID =='')
                    {
                        resourceID = projrolelist[rr].roleid;
                    }
                    else
                        { 
                            resourceID = resourceID+','+projrolelist[rr].roleid;
                         }
                }
            }
            return resourceID;
        }
        for(var i=0; i<records.length ; i++)
        {
            console.log('records>>>>>'+JSON.stringify(records[i]));
            if(temprolelist.length > 0)
                {
            var Resource =''
            resourceID = '';
            var resourceIdArr = records[i].owner_id.split(',');
            for(var j=0; j<temprolelist.length ; j++)
           {
               if(resourceIdArr.length>0){
                   if(resourceIdArr.includes(temprolelist[j].resid))
                   {
                       Resource = RoleToResource(temprolelist[j].resstring);
                   }
               } 
           }
            records[i].owner_id= Resource;
                    records[i].sfdcid ='';
                    }
           var d;
            var Ed;
            var durationres;
            
            if(TempLookup != null && TempLookup != '' && ifcondition =='true')
            {
               
                durationres = records[i].Duration;
                if(records[i].text =='EFFECTIVE DATE')
                {
                    //d = gantt.date.date_part(new Date(EffectiveDate));
                    d = gantt.date.convert_to_utc(new Date(EffectiveDate));
                    /*d = new Date(EffectiveDate)
                    var localTime = d.getTime();
                    var localOffset = d.getTimezoneOffset() * 60000;
                    var utc = localTime + localOffset;
                    var offset = 5.5;   
                    var bombay = utc + (3600000*offset);
                    d = new Date(bombay);*/
                    
                }
                else{
                    //d = gantt.date.date_part(new Date(startdate));
                    d = gantt.date.convert_to_utc(new Date(startdate));
                    /*d= new Date(startdate)
                    var localTime = d.getTime();
                    var localOffset = d.getTimezoneOffset() * 60000;
                    var utc = localTime + localOffset;
                    var offset = 5.5;   
                    var bombay = utc + (3600000*offset);
                    d = new Date(bombay);
                    */
                    }
               
            }
            else
            {
                durationres = records[i].Duration;
                d= gantt.date.convert_to_utc(new Date(records[i].start_date));
                // d = gantt.date.date_part(new Date(startdate));

                //d = gantt.date.date_part(new Date(records[i].start_date));
                /* d = new Date(records[i].start_date);
                var localTime = d.getTime();
                var localOffset = d.getTimezoneOffset() * 60000;
                var utc = localTime + localOffset;
                var offset = 5.5;   
                var bombay = utc + (3600000*offset);
                d = new Date(bombay);
                   */
              
            }
            
           
             if(records[i].actual_finish_date != '' && records[i].actual_finish_date != null && records[i].actual_finish_date != undefined)
            {
                //var Actual_finish_date = gantt.date.date_part(new Date(records[i].actual_finish_date));
                var Actual_finish_date =  gantt.date.convert_to_utc(new Date(records[i].actual_finish_date));
             }
            else
            {
                var Actual_finish_date = 'N/A';
             }
           
            var resourcearr =[];
            if(records[i].owner_id.indexOf(',')!== -1)
            {
                var str_array3 = records[i].owner_id.split(','); 
                for(var k = 0; k < str_array3.length; k++) 
                {
                    resourcearr.push(str_array3[k]);
                }
            }
            else{
                resourcearr.push(records[i].owner_id);
            }
            
            if(records[i].target.indexOf(',')!== -1)
            {
                var str_array = records[i].target.split(','); 
                var str_array1 = records[i].linkid.split(','); 
                var str_array2 = records[i].type.split(','); 
                var str_array3 = records[i].lag.split(','); 
                //alert('inside123'+str_array);
                for(var j = 0; j < str_array.length; j++) 
                {
                    // instead of calling gantt.init/gantt.parse - put data items into arrays you defined before
                    ganttData.data.push({id:records[i].projId,RowNum:records[i].RowNum,sfdcid:records[i].sfdcid,wbs:records[i].wbs,text:records[i].text, start_date:d,end_date:Ed,actual_finish:Actual_finish_date, duration:durationres,priority:records[i].priority,parent:records[i].parentid,predecessors:records[i].predecessor,open:true,type:records[i].projtype,owner_id:resourcearr,checked:records[i].checked,progress:records[i].progress,Notes:records[i].Notes,dashboard:records[i].dashboard,split:records[i].split});
                    ganttData.links.push({id:str_array1[j],source: records[i].projId, target:str_array[j], type:str_array2[j],lag:str_array3[j]});
                }
            }
            else if(records[i].linkid=='undefined' ||records[i].linkid=='')
            {
                ganttData.data.push({ id: records[i].projId,RowNum:records[i].RowNum, sfdcid:records[i].sfdcid,wbs: records[i].wbs, text: records[i].text, start_date: d, end_date: Ed, actual_finish: Actual_finish_date, duration: durationres, priority: records[i].priority, parent: records[i].parentid, predecessors: records[i].predecessor, type: records[i].projtype, open: true, owner_id: resourcearr, checked: records[i].checked, progress: records[i].progress, Notes: records[i].Notes,dashboard:records[i].dashboard,split:records[i].split });
            }
            else
            { 
                ganttData.data.push({id:records[i].projId,RowNum:records[i].RowNum,sfdcid:records[i].sfdcid,wbs:records[i].wbs,text:records[i].text, start_date:d,end_date:Ed,actual_finish:Actual_finish_date, duration:durationres,priority:records[i].priority,parent:records[i].parentid,predecessors:records[i].predecessor,open:true,type:records[i].projtype,owner_id:resourcearr,checked:records[i].checked,progress:records[i].progress,Notes:records[i].Notes,dashboard:records[i].dashboard,split:records[i].split});
                ganttData.links.push({id:records[i].linkid,source: records[i].projId, target:records[i].target, type:records[i].type,lag:records[i].lag});
            }
        }
        
        gantt.attachEvent("onTaskLoading", function(task){
            //alert('task>>>>'+task.actual_finish)
            if(task.actual_finish != 'N/A') {
                task.auto_scheduling = false;
            }
            return true;
        });
        // and once you've collected all the data - parse it all at once
        gantt.init('gantt_here');
		gantt.parse(ganttData);
        
        //code to delete the array of task 
         var deletetaskvalues=[];
        var deleteTaskTarget = [];
        gantt.attachEvent("onBeforeTaskDelete", function(id,item)
        {
            var link = []
            var link = item.$source;
            for(let li = 0; li<link.length ; li++)
            {
                let linklist = gantt.getLink(link[li]);
                deleteTaskTarget.push(linklist.target);
            }
            var task = gantt.getTask(id);
            deletetaskvalues.push(task.sfdcid);
            console.log('deletetaskvalues>>>>'+deletetaskvalues);
            gantt.eachTask(function(child){
                 var task1 = gantt.getTask(child.id);
                deletetaskvalues.push(task1.sfdcid);
               
            console.log('deletetaskvalues in after task update>>'+deletetaskvalues);
            }, id);
            return true;
        });
        /*gantt.attachEvent("onAfterTaskDelete", function(id,item){  
            console.log('deletetaskvalues::'+JSON.stringify(deletetaskvalues));
        }); */
        var TaskDelete = 'false';
        gantt.attachEvent("onAfterTaskDelete", function(id,item)
        {  
            //alert('item>>>>'+JSON.stringify(item));
            var taskcount = 0;
            var task = gantt.getTaskByTime();
            for(var i=0; i<task.length ; i++)
            {
                taskcount = taskcount+1;
                if(taskcount == task.length){
                    //document.getElementById("spinner").style.display = "none";
                }
                var taskpred = task[i].$target;
                var taskid =[];
                //console.log('taskpred>>>>>'+taskpred);
                if(task[i].$target == null || task[i].$target == undefined || task[i].$target == '' || task[i].$target.length == 0)
                {
                    if(deleteTaskTarget.includes(task[i].id))
                    {
                        task[i].predecessors = '';
                        if(task[i].actual_finish == null || task[i].actual_finish == '' || task[i].actual_finish == undefined || task[i].actual_finish == 'N/A')
                            {
                        var startdates = new Date(startdate)
                        task[i].start_date = gantt.date.convert_to_utc(new Date(startdate));
                        task[i].duration = task[i].duration;
                        task[i].end_date  = gantt.calculateEndDate({start_date: task[i].start_date, duration: task[i].duration});
                        }
                        if(task[i].id != null && task[i].id != undefined)
                        {
                            //taskid.push(task[i].id);
                            //gantt.updateTask(task[i].id,task[i]);
                            //gantt.autoSchedule(task[i].id);
                        }
                    }
                }
                else if(task[i].$target.length > 0)
                {
                    //var target = task[i].$target;
                    //Predecessor_function(target);
                    var links = task[i].$target;
                    var labels = [];
                    var types = [];
                    
                    for(var j = 0; j < links.length; j++){
                        var link = gantt.getLink(links[j]);
                        //alert('link'+JSON.stringify(link));
                        var pred = gantt.getTask(link.source);
                        // alert('pred'+JSON.stringify(pred));
                        var index = pred.$index;
                        index = index+1;
                        var typ = link.type;
                        var lag = link.lag;
                        if(typ == 0){
                            typedup = 'FS';
                        }
                        else if(typ == 1){
                            typedup = 'SS';
                        }
                            else if(typ == 2){
                                typedup = 'FF';
                            }
                                else if(typ == 3){
                                    typedup = 'SF';
                                }
                        var sign;
                        if(lag >= 0){
                            sign ='+';
                        }
                        else{
                            sign ='';  
                        }
                        
                        //alert('lag>>'+lag);
                        if(lag == null || lag == '' || lag == undefined)
                        {
                            labels.push(gantt.getTaskNumber(pred)+typedup);
                        }
                        else
                        { 
                            labels.push(gantt.getTaskNumber(pred)+typedup+sign+lag+'days');
                        }
                        
                        //return labels.join(", ")
                        task[i].predecessors = labels.join(", ");
                        /*var startdates = new Date(startdate)
                        task[i].start_date = gantt.date.convert_to_utc(new Date(startdate));
                        task[i].duration = task[i].duration;
                        task[i].end_date  = gantt.calculateEndDate({start_date: startdates, duration: task[i].duration});*/
                        
                        
                        if(task[i].id != null && task[i].id != undefined){
                            //gantt.autoSchedule(task[i].id);
                            //taskid.push(task[i].id);
                        }
                    }
                }
                gantt.updateTask(task[i].id,task[i]);
            }
            //Predecessor_function();
            //});
            gantt.autoSchedule();
            return true;
        });
        
        gantt.attachEvent("onRowDragEnd", function(task)
        {
            gantt.batchUpdate(function () {
            var taskcount = 0;
            var task = gantt.getTaskByTime();
            
            for(var i=0; i<task.length ; i++)
            {
                taskcount = taskcount+1;
                if(taskcount == task.length){
                    //document.getElementById("spinner").style.display = "none";
                }
                var taskpred = task[i].$target;
                var taskid =[];
                //console.log('taskpred>>>>>'+taskpred);
                if(task[i].$target == null || task[i].$target == undefined || task[i].$target == '' || task[i].$target.length == 0)
                {
                    if(deleteTaskTarget.includes(task[i].id))
                    {
                        task[i].predecessors = '';
                        if(task[i].id != null && task[i].id != undefined)
                        {
                            taskid.push(task[i].id);
                            gantt.updateTask(task[i].id,task[i]);
                            //gantt.autoSchedule(task[i].id);
                        }
                     }
                }
                else if(task[i].$target.length > 0)
                {
                    //var target = task[i].$target;
                    //Predecessor_function(target);
                    var links = task[i].$target;
                    var labels = [];
                    var types = [];
                    
                    for(var j = 0; j < links.length; j++){
                        var link = gantt.getLink(links[j]);
                        //alert('link'+JSON.stringify(link));
                        var pred = gantt.getTask(link.source);
                        // alert('pred'+JSON.stringify(pred));
                        var index = pred.$index;
                        index = index+1;
                        var typ = link.type;
                        var lag = link.lag;
                        if(typ == 0){
                            typedup = 'FS';
                        }
                        else if(typ == 1){
                            typedup = 'SS';
                        }
                            else if(typ == 2){
                                typedup = 'FF';
                            }
                                else if(typ == 3){
                                    typedup = 'SF';
                                }
                        var sign;
                        if(lag >= 0){
                            sign ='+';
                        }
                        else{
                            sign ='';  
                        }
                        
                        //alert('lag>>'+lag);
                        if(lag == null || lag == '' || lag == undefined)
                        {
                            labels.push(gantt.getTaskNumber(pred)+typedup);
                        }
                        else
                        { 
                            labels.push(gantt.getTaskNumber(pred)+typedup+sign+lag+'days');
                        }
                        
                        //return labels.join(", ")
                        task[i].predecessors = labels.join(", ");
                        //gantt.autoSchedule(task[i].id);
                        if(task[i].id != null && task[i].id != undefined){
                            gantt.updateTask(task[i].id,task[i]);
                            //taskid.push(task[i].id);
                        }
                    }
                }
            }
            //Predecessor_function();
            //gantt.updateTask(taskid);
                });
            gantt.autoSchedule();
            return true;
        });
        
        gantt.attachEvent("onGanttRender", function(task){
        document.getElementById("spinner").style.display = "none";
        });
        
        (function(){
            
            function endPopup(){
                modal = null;
                editLinkId = null;
            }
            function cancelEditLink(){
                endPopup()
            }
            
            function deleteLink(){
                var deletedpre;
                var link = gantt.getLink(editLinkId);
                
                gantt.deleteLink(editLinkId);
                var pred = gantt.getTask(link.source);
                
                var typ = link.type;
                var lag = link.lag;
                if(typ == 0){
                    typedup = 'FS';
                }
                else if(typ == 1){
                    typedup = 'SS';
                }
                    else if(typ == 2){
                        typedup = 'FF';
                    }
                        else if(typ == 3){
                            typedup = 'SF';
                        }
                var sign;
                if(lag >= 0){
                    sign ='+';
                }
                else{
                    sign ='-';  
                }
                var index = pred.$index;
                index = index+1;
                if(gantt.getTask(link.target).predecessors.includes("days"))
                {
                    deletedpre=index+typedup+sign+lag+'days'; 
                }
                else if(lag == null || lag == '' || lag == undefined ||lag == '0')
                {
                    deletedpre=index+typedup;
                }
                gantt.getTask(link.target).predecessors=gantt.getTask(link.target).predecessors.replace(deletedpre,'');
                gantt.getTask(link.target).predecessors=gantt.getTask(link.target).predecessors.replace(',,',',');
                gantt.updateTask(link.target);
                endPopup()
            }
            
            
            function saveLink(){
                var link = gantt.getLink(editLinkId);
                
                var lagValue = modal.querySelector(".lag-input").value;
                var lagValue = lagValue;
                if(!isNaN(parseInt(lagValue, 10))){
                    link.lag = parseInt(lagValue, 10);
                }
                
                gantt.updateLink(link.id);
                if(gantt.autoSchedule){
                    gantt.autoSchedule(link.source);
                }
                endPopup();
            }
            
            var modal;
            var editLinkId;
            gantt.attachEvent("onLinkDblClick", function(id,e){
                editLinkId = id;
                var link = gantt.getLink(id);
                var linkTitle;
                switch(link.type){
                    case gantt.config.links.finish_to_start:
                        linkTitle = "FS";
                        break;
                    case gantt.config.links.finish_to_finish:
                        linkTitle = "FF";
                        break;
                    case gantt.config.links.start_to_start:
                        linkTitle = "SS";
                        break;
                    case gantt.config.links.start_to_finish:
                        linkTitle = "SF";
                        break;
                }
                
                linkTitle += " " + gantt.getTask(link.source).text + " -> " + gantt.getTask(link.target).text;
                
                modal = gantt.modalbox({
                    title: linkTitle,
                    text: "<div>" +
                    "<label>Lag <input type='number' class='lag-input' /></label>" +
                    "</div>",
                    buttons: [
                        {label:"Save", css:"link-save-btn", value:"save"},
                        {label:"Cancel", css:"link-cancel-btn", value:"cancel"},
                        {label:"Delete", css:"link-delete-btn", value:"delete"}
                    ],
                    width: "500px",
                    type: "popup-css-class-here",
                    callback: function(result){
                        switch(result){
                            case "save":
                                saveLink();
                                break;
                            case "cancel":
                                cancelEditLink();
                                break;
                                
                            case "delete":
                                deleteLink();
                                break;
                        }
                    }
                });
                
                
                modal.querySelector(".lag-input").value = link.lag || 0;
                return false;
            });
            
        })();
        //resource code      
        gantt.serverList("owner", [
            <apex:repeat value="{!UsData}" var="own">
            {key: "{!own.Name}",label: "{!own.Name}"},
            </apex:repeat>
        ]);
        console.log(gantt.serverList());
        //resource code 
        gantt.serverList("priority", [
            {key: "Low", label: "Low"},
            {key: "Normal", label: "Normal"},
            {key: "High", label: "High"}
        ]);
        
        
        (function(gantt){
            var taskNumbers = null;
            function calculateAll(){
                taskNumbers = {};
                var index = 1;
                gantt.eachTask(function(task){
                    taskNumbers[task.id] = index;
                    index++;
                });
            }
            function resetCache(){
                taskNumbers = null; 
                return true;
            }
            
            gantt.getTaskNumber = function(task) {
                if(!taskNumbers){
                    calculateAll()
                }
                task.RowNum = taskNumbers[task.id];
                // gantt.updateTask(task.id);
                return taskNumbers[task.id];
            };
            
            gantt.attachEvent("onTaskCreated", resetCache);
            gantt.attachEvent("onAfterTaskMove", resetCache);
            gantt.attachEvent("onBeforeParse", resetCache);
            gantt.attachEvent("onAfterTaskDelete", resetCache);
            gantt.attachEvent("onAfterTaskAdd", resetCache);
            gantt.attachEvent("onAfterSort", resetCache);
            gantt.attachEvent("onLightboxDelete", resetCache);
            gantt.attachEvent("onAfterTaskUpdate", resetCache);
            gantt.attachEvent("onLightboxSave", resetCache);
        })(gantt);
        
        var task=null;
        var editors = {
            RowNum :{type: "number", map_to: "RowNum"},
            wbs: {type: "text", map_to: "wbs"},
            text: {type: "text", map_to: "text"},
            start_date: {type: "date", map_to: "start_date",min:new Date(2000,01,01), max: new Date(3000,12,12)},
            end_date: {type: "date", map_to: "end_date",min:new Date(2000,01,01), max: new Date(3000,12,12)},
            actual_finish: {type: "date", map_to: "actual_finish",min:new Date(2000,01,01), max: new Date(3000,12,12)},
            duration: {type: "number", map_to: "duration", min:0, max: 100},        
            work_duration: {type: "number", map_to: "work_duration", min:0, max: 100},        
            priority: {type: "select", map_to: "priority", options:gantt.serverList("priority")},
            predecessors: {type: "text", map_to: "predecessors"},
            progress: {type: "number", map_to: "progress"},
            owner: {type: "select", map_to: "owner", options:gantt.serverList("owner")},
            Notes : {type: "text", map_to: "Notes"},
            split :{type :"checkbox",map_to :"split"}
        };
        
        function priorityLabel(task){
            var value = task.priority;
            var list = gantt.serverList("priority");
            for(var i = 0; i < list.length; i++){
                if(list[i].key == value){
                    return list[i].label;
                }
            }
            return "";
        }
        function ownerLabel(task){
            var value = task.owner;
            var list = gantt.serverList("owner");
            for(var i = 0; i < list.length; i++){
                if(list[i].key == value){
                    return list[i].label;
                }
            }
            return "";
        }
        
        var resdate = new Date(startdate);
        //var resdate = new Date(startdate);
        var localTime = resdate.getTime();
        var localOffset = resdate.getTimezoneOffset() * 60000;
        var utc = localTime + localOffset;
        var offset = 5.5;   
        var bombay = utc + (3600000*offset);
        resdate = new Date(bombay);
        var enddate = new Date(resdate);
        enddate.setDate(enddate.getDate()+1);
        console.log('enddate >>'+enddate);
       gantt.attachEvent("onBeforeLightbox", function(id,task) {
           
              var task = gantt.getTask(id);
            if(task.$new){
                task.start_date = resdate;
                task.end_date = enddate;
            }
            
      
             var links = task.$target;
          
            console.log(links)
            var labels = [];
            for(var i = 0; i < links.length; i++){
                var link = gantt.getLink(links[i]);
                var pred = gantt.getTask(link.source);
                
                var typ = link.type;
                var lag = link.lag;
                if(typ == 0){
                    typedup = 'FS';
                }
                else if(typ == 1){
                    typedup = 'SS';
                }
                    else if(typ == 2){
                        typedup = 'FF';
                    }
                        else if(typ == 3){
                            typedup = 'SF';
                        }
                var sign;
                if(lag >= 0){
                    sign ='+';
                }
                else{
                    sign ='';  
                }
                var index = pred.$index;
                
                index = index+1;
               
                if(lag == null || lag == '' || lag == undefined)
                {
                    labels.push(gantt.getTaskNumber(pred)+typedup);
                }
                else
                {
                    labels.push(gantt.getTaskNumber(pred)+typedup+sign+lag+'days');
                }
                
            }
            
            var count = 0;
            if(count == 0){
                count = count+1;
                var startdate = new Date(task.start_date);
                gantt.templates.task_time = function(startdate,enddate,task){
                    var enddate = new Date(task.end_date);
                    enddate = gantt.calculateEndDate({start_date:task.end_date, duration:-1, task:task});
                    var startMonth = startdate.getMonth()+1;
                    var endMonth = enddate.getMonth()+1;
                    if(startdate.getMonth() != 9 && startdate.getMonth() != 10 && startdate.getMonth() !=11){
                        startMonth = '0'+startMonth;
                    }
                    if(enddate.getMonth() != 9 && enddate.getMonth() != 10 && enddate.getMonth() !=11){
                        endMonth = '0'+endMonth;
                    }
                    return startMonth+'/'+startdate.getDate()+'/'+startdate.getFullYear()+" - "+endMonth+'/'+enddate.getDate()+'/'+enddate.getFullYear();
                };
                gantt.templates.task_date= function(enddate){
                    var enddate = new Date(task.end_date);
                    enddate = gantt.calculateEndDate({start_date:task.end_date, duration:-1, task:task});
                    var endMonth = enddate.getMonth()+1;
                    if(enddate.getMonth() != 10 && enddate.getMonth() != 11 && enddate.getMonth() !=12){
                        endMonth = '0'+endMonth;
                    }
                    return endMonth+'/'+enddate.getDate()+'/'+enddate.getFullYear();
                };
            }
            
            task.predecessors = labels.join(",") 
            var parenttaskId;
            var parenttasktype;
            var restype;
                if(gantt.getParent(task.id) !=0)
                {
                    parenttaskId = gantt.getParent(task.id);
                    parenttasktype = gantt.getTask(parenttaskId);
                    //alert('parenttasktype>>>>'+parenttasktype.$rendered_type);
                    //parenttasktype.type = 'project';
                    restype = parenttasktype.$rendered_type;
                    
                }
            return true;
            
        });
        
         gantt.templates.tooltip_text = function(start,end,task){
            var startdate = new Date(task.start_date);
            var enddate = new Date(task.end_date);
            enddate = gantt.calculateEndDate({start_date:task.end_date, duration:-1, task:task});
            var startMonth = startdate.getMonth()+1;
            var endMonth = enddate.getMonth()+1;
            if(startdate.getMonth() != 9 && startdate.getMonth() != 10 && startdate.getMonth() !=11){
                startMonth = '0'+startMonth;
            }
            if(enddate.getMonth() != 9 && enddate.getMonth() != 10 && enddate.getMonth() !=11){
                endMonth = '0'+endMonth;
            }
            return "<b>Task:</b> "+task.text+"<br/><b>Start Date:</b> " + startMonth+'/'+startdate.getDate()+'/'+startdate.getFullYear()+"<br/><b>End Date:</b> "+ endMonth+'/'+enddate.getDate()+'/'+enddate.getFullYear();
        };
        // Actual Finish Rollup To Summary Task, if all subTask has value of subTask - summary Task ActualFinish will Update
        function get_max_actual_finish(id){
            var parent = gantt.getTask(id);
            var max_actual_finish = null;
            gantt.eachTask(function(child){
                
                if (child.actual_finish && +child.actual_finish > +max_actual_finish) max_actual_finish = gantt.copy(child.actual_finish);
            },id);
            
            parent.actual_finish = gantt.copy(max_actual_finish);
            max_actual_finish = null;
            gantt.updateTask(id);
        }
        //One of sub task is Null or N/A - summary task will became N/A
        function Null_actual_finish(id){
            var parent = gantt.getTask(id);
            
            parent.actual_finish = 'N/A';
            //max_actual_finish = null;
            gantt.updateTask(id);
        }
        //Ends here
        
        var savelist = records;
        var Errorflag ='false';

        /*  gantt.attachEvent("onLightboxSave", function(id, task, is_new){
            if(task.type=='milestone')
            {
                task.dashboard = 'true';
                task.checked ='true';
            }
            else{
                task.dashboard = 'false';
                task.checked ='false';
            }
            
            if(task.text == null || task.text ==''|| task.text == undefined)
            {
                document.getElementById("warningToastFortext").style.display = 'block';
                setTimeout(closewarningText,1000);                
                return false;
            }
           
            if(task.type != 'project')
            {
                if(task.owner_id.length <= 0 )
                {
                    document.getElementById("warningToastForres").style.display = 'block';
                    setTimeout(closewarningres,1000); 
                    return false;
                }
            }
            return true;
        });*/
        gantt.attachEvent("onLightbox", function (id){
            console.log('inside lightbox'+id);
            var task = gantt.getTask(id);
            var split = task.split;
        });
        /*gantt.templates.task_class = function (start, end, task) {
            if (task.split == 'true' ||task.split == "[true]") 
            {
                
                return "milestone_task";
            }
            return "";
        };
        */
        gantt.attachEvent("onLightboxSave", function(id, task, is_new){
           
            savelist.push(task);
            if(task.parent >0)
              {
                  Null_actual_finish(task.parent)
                 
              }  
            
            console.log('task>>'+JSON.stringify(task));
           if(task.type == 'project')
               {
                task.split = "[false]";
                   //gantt.updateTask(id);
               }
              if(task.split == 'true'|| task.split == "[true]")
              {
                  task.dashboard = 'true';
                  task.checked ='true';
              }
              else{
                  task.dashboard = 'false';
                  task.checked ='false';
              }
            
             //validations startes here
            if(task.text == null || task.text ==''|| task.text == undefined)
            {
                document.getElementById("warningToastFortext").style.display = 'block';
                setTimeout(closewarningText,1000);                
                return false;
            }
           
            if(task.type != 'project')
            {
                if(task.owner_id.length <= 0 )
                {
                    document.getElementById("warningToastForres").style.display = 'block';
                    setTimeout(closewarningres,1000); 
                    return false;
                }
            }
            //ends here
            if((task.split =='true' || task.split =='[true]') && task.type != 'project')
            {
                task.color='#C32B9F';
                //return "Taskcolor";
            }
            else
            {
                task.color='';
            }
            //actual finish project rollup starts here
            var parenttaskId;
              var parenttasktype;
              var restype;
              if(gantt.getParent(task.id) !=0)
              {
                  
                  parenttaskId = gantt.getParent(task.id);
                  parenttasktype = gantt.getTask(parenttaskId);
                  parenttasktype.type = 'project';
                  //parenttasktype.actual_finish = 'N/A';
                  parenttasktype.split = "[false]";
                  parenttasktype.color='';
                  //parenttasktype.owner_id = "";
                  gantt.updateTask(parenttasktype.id);
              }    
            // ends here
            var new_linked_ids = [];
            var predecessors_array = [];
            
            if (task.predecessors) predecessors_array = task.predecessors.split(",");
            var new_link =[];
            var link_type;
            var myString;
            for (var j = 0; j < predecessors_array.length; j++) {
                myString = predecessors_array[j];
                
                myString = myString.replace(/(?![+-]?\d*\.?\d+|e[+-]\d+)[^0-9]/g,'');
                
                var resmystring;
                if(myString.includes("+"))
                {
                    myString = myString.split("+");
                    myString = myString[0];
                    
                }
                
                else if(myString.includes("-"))
                {
                    myString = myString.split("-");
                    myString = myString[0];
                }
                link_type = parse_link_type(predecessors_array[j]);
                for(var k = 0; k < savelist.length; k++)
                {
                    
                    
                    if(savelist[k].RowNum == myString && savelist[k].id != null)
                    {
                       
                        new_linked_ids1 =savelist[k].id;
                        new_linked_ids.push(new_linked_ids1);
                    }
                    
                    else if(savelist[k].RowNum == myString)
                    {
                       
                        new_linked_ids1 = savelist[k].projId ;
                        new_linked_ids.push(new_linked_ids1);
                        
                    }
                    
                }
            }
            var links = task.$target;
            var obsolete_links = [];
            var valid_link = 0;
            //looking for obsolete links
                                                 if(predecessors_array != null && predecessors_array !='' && predecessors_array != undefined){

            for(var i = 0; i < links.length; i++){
                
                var obsolete_controller = 1;
                var link = gantt.getLink(links[i]);
                if (link.source){
                    var temp_task = gantt.getTask(link.source);
                    if (temp_task) {
                        var pred = gantt.getTask(link.source).id
                        for (var K = 0; K < new_linked_ids.length; K++) {
                            if (new_linked_ids[k] == pred) obsolete_controller = 0;
                        }
                    }
                    if (obsolete_controller) obsolete_links.push(link.id)
                        }
            }
            //delete all obsolete links
            }
            
            for (var i = 0; i < obsolete_links.length; i++) 
            {
                gantt.deleteLink(obsolete_links[i]);
            }
            
            var new_link1 =[];
            var predecessors_array1 = [];
            if (task.predecessors) predecessors_array1 = task.predecessors.split(",");
            for (var m = 0; m < predecessors_array1.length; m++) {
                // var predecessor_id = parseFloat(predecessors_array1[m]);
                var resmyString;
                resmyString = predecessors_array1[m];
                
                resmyString = resmyString.replace(/(?![+-]?\d*\.?\d+|e[+-]\d+)[^0-9]/g,'');
                
                if(resmyString.includes("+"))
                {
                    
                    resmyString = resmyString.split("+");
                    resmyString = resmyString[0];
                    
                    
                }
                
                else if(resmyString.includes("-"))
                {
                    
                    resmyString = resmyString.split("-");
                    resmyString = resmyString[0];
                    
                }
                var poslag;
                var neglag;
                if(predecessors_array1[m].includes("+"))
                {
                    
                    poslag = predecessors_array1[m].split("+");
                }
                else if(predecessors_array1[m].includes("-"))
                {
                    
                    neglag = predecessors_array1[m].split("-");
                    
                }
                var LagSign;
                
                if(neglag !=null && neglag != 'undefined' && neglag != ''){
                    var naglagval = parseInt(neglag[1]);
                    if(naglagval == 0)
                    {
                        naglagval = naglagval;
                    }
                    else{
                        naglagval = '-'+naglagval;
                        
                    }
                    //alert('naglagval>>>>'+naglagval);
                    
                    LagSign = naglagval;
                    
                }
                
                
                if(poslag !=null && poslag != 'undefined' && poslag != ''){
                    
                    var poslagval = parseInt(poslag[1]);
                    //poslagval ='+'+poslagval;
                    LagSign = poslagval;
                }
                
                
                var lagres;
                if(isNaN(LagSign)){
                    lagres = 0; 
                    //lagres = '+'+0;
                }else{
                    
                    lagres = LagSign;
                    
                }
                //alert('lagres>>>>>'+lagres);
                
                
                for(var l = 0; l < savelist.length; l++)
                {
                    //alert('resmyString>>>'+resmyString);
                    if(savelist[l].RowNum == resmyString && savelist[l].id != null)
                    {
                        var source=savelist[l].id;
                        
                    }
                    
                    else if(savelist[l].RowNum == resmyString)
                    {
                        var source=savelist[l].projId;
                    }
                }
                var ParentId = gantt.getParent(task.id);
                if(source == task.id)
                {
                     Errorflag = 'true';

                    //task.predecessors ='';
                    document.getElementById("warningToastForPred1").style.display = 'block';
                    //gantt.hideLightbox();
                    setTimeout(closewarningToastForPred1,2200); 
                     return false;
               
                }
                else if( source == null || source =='' || source == undefined)
                    {
                        document.getElementById("warningToastForPred2").style.display = 'block';
                        //gantt.hideLightbox();
                        setTimeout(closewarningToastForPred2,2200); 
                        return false
                    }
                else if(source == ParentId)
                 {
                    
                     //task.predecessors ='';
                    document.getElementById("warningToastForPred").style.display = 'block';
                     //gantt.hideLightbox();
                    setTimeout(closewarningToastForPred,2200);
                     return false;
                 }
                var link_type = parse_link_type(predecessors_array1[m]);
               
                var new_link1 = { source: source, target: task.id, type: link_type,lag:lagres} 
               
                gantt.addLink(new_link1);
            }
            
            task.predecessors
            return true;
        }) 
        
        gantt.attachEvent("onAfterTaskUpdate", function(id, item){
            var task = item;
            savelist.push(task);
           
            if(task.parent >0 && task.actual_finish != null && task.actual_finish !='' && task.actual_finish != undefined && task.actual_finish !='N/A'){
                         parenttasktype = gantt.getTask(task.parent);
                    childIds = gantt.getChildren(task.parent);
                    var ChildTask =[];
                    for(var child =0 ; child < childIds.length ; child++)
                    {
                       
                        var childtaskInd = gantt.getTask(childIds[child]);
                       ChildTask.push(childtaskInd);
                    }
                    var dates =[];
                    if(ChildTask.length > 0){
                    for(var d=0 ; d<ChildTask.length; d++)
                        {
                            dates.push(ChildTask[d].actual_finish);
                        }
                       
                    }
                    
                    var maxDate=new Date(Math.max.apply(null,dates));
                    var today = new Date();
                    
                    if(maxDate =='Invalid Date' || maxDate > today){
                        //parenttasktype.actual_finish = 'N/A';
                        
                        }
                    else{
                        //parenttasktype.actual_finish = maxDate;
                      get_max_actual_finish(task.parent)
                        }
                    
                    
                }
 
             if (task.parent > 0 && task.actual_finish =='N/A') {
                
                 Null_actual_finish(task.parent);
                  }
             if(task.actual_finish != null && task.actual_finish !='' && task.actual_finish != undefined && task.actual_finish !='N/A')
            {
                
                 task.auto_scheduling = false;
               

            }
            else{
                 task.auto_scheduling = true;
                 }
            if(TaskDelete =='true')
                {
            var new_linked_ids = [];
            var predecessors_array = [];
            //alert('task.predecessors>>>'+task.predecessors);
            if (task.predecessors) predecessors_array = task.predecessors.split(",");
            var new_link =[];
            var link_type;
            var myString;
            for (var j = 0; j < predecessors_array.length; j++) {
                myString = predecessors_array[j];
                //alert('myString>>>'+myString);
                myString = myString.replace(/(?![+-]?\d*\.?\d+|e[+-]\d+)[^0-9]/g,'');
                
               
                if(myString.includes("+"))
                {
                    myString = myString.split("+");
                    myString = myString[0];
                    
                }
                
                else if(myString.includes("-"))
                {
                    myString = myString.split("-");
                    myString = myString[0];
                }

                
                //var new_linked = parseFloat(predecessors_array[j]);
                link_type = parse_link_type(predecessors_array[j]);
                
                for(var k = 0; k < savelist.length; k++)
                {
                    
                    
                    if(savelist[k].RowNum == myString && savelist[k].id != null)
                    {
                        //alert('inside if>>>>>>>>');
                        new_linked_ids1 =savelist[k].id;
                        new_linked_ids.push(new_linked_ids1);
                    }
                    
                    else if(savelist[k].RowNum == myString)
                    {
                        //alert('inside else if>>>>>>>>');
                        // alert('savelist[k].projId>>>'+savelist[k].projId);
                        new_linked_ids1 = savelist[k].projId ;
                        new_linked_ids.push(new_linked_ids1);
                        
                    }
                    
                }
            }
            var links = task.$target;
            var obsolete_links = [];
            var valid_link = 0;
            //looking for obsolete links
                         if(predecessors_array != null && predecessors_array !='' && predecessors_array != undefined){

            for(var i = 0; i < links.length; i++){
                //alert('inside onsavebox');
                var obsolete_controller = 1;
                var link = gantt.getLink(links[i]);
                if (link.source){
                    var temp_task = gantt.getTask(link.source);
                    if (temp_task) {
                        var pred = gantt.getTask(link.source).id
                        for (var K = 0; K < new_linked_ids.length; K++) {
                            if (new_linked_ids[k] == pred) obsolete_controller = 0;
                        }
                        //console.log('obsolete_controller>>'+obsolete_controller);
                        }
                        if (obsolete_controller) obsolete_links.push(link.id)
                        //console.log('obsolete_links>>'+obsolete_links);
                    
                        }
            }
                             }
            //delete all obsolete links
            
            
            for (var i = 0; i < obsolete_links.length; i++) 
            {
                gantt.deleteLink(obsolete_links[i]);
            }
            
            var new_link1 =[];
            var predecessors_array1 = [];
            if (task.predecessors) predecessors_array1 = task.predecessors.split(",");
            for (var m = 0; m < predecessors_array1.length; m++) {
                // var predecessor_id = parseFloat(predecessors_array1[m]);
                var resmyString;
                resmyString = predecessors_array1[m];
                
                resmyString = resmyString.replace(/(?![+-]?\d*\.?\d+|e[+-]\d+)[^0-9]/g,'');
               
                if(resmyString.includes("+"))
                {
                    
                    resmyString = resmyString.split("+");
                    resmyString = resmyString[0];
                    
                    
                }
                
                else if(resmyString.includes("-"))
                {
                    
                    resmyString = resmyString.split("-");
                    resmyString = resmyString[0];
                    
                }
                var poslag;
                var neglag;
                if(predecessors_array1[m].includes("+"))
                {
                    
                    poslag = predecessors_array1[m].split("+");
                }
                else if(predecessors_array1[m].includes("-"))
                {
                    
                    neglag = predecessors_array1[m].split("-");
                    
                }
                var LagSign;
                
                if(neglag !=null && neglag != 'undefined' && neglag != ''){
                    var naglagval = parseInt(neglag[1]);
                    if(naglagval == 0)
                    {
                        naglagval = naglagval;
                    }
                    else{
                        naglagval = '-'+naglagval;
                        
                    }
                    //alert('naglagval>>>>'+naglagval);
                    
                    LagSign = naglagval;
                    
                }
                
                
                if(poslag !=null && poslag != 'undefined' && poslag != ''){
                    
                    var poslagval = parseInt(poslag[1]);
                    //poslagval ='+'+poslagval;
                    LagSign = poslagval;
                }
                
                
                var lagres;
                if(isNaN(LagSign)){
                    lagres = 0; 
                    //lagres = '+'+0;
                }else{
                    
                    lagres = LagSign;
                    
                }
                //alert('lagres>>>>>'+lagres);
                
                
                for(var l = 0; l < savelist.length; l++)
                {
                    if(savelist[l].RowNum == resmyString && savelist[l].id != null)
                    {
                        
                        var source=savelist[l].id;
                        
                    }
                    
                    else if(savelist[l].RowNum == resmyString)
                    {
                      
                        //alert('create inside else if>>>>>>>>');
                        // alert('create insidesavelist[k].projId>>>'+savelist[l].projId);
                        var source=savelist[l].projId;
                    }
                }
                
                var link_type = parse_link_type(predecessors_array1[m]);
                 var ParentId = gantt.getParent(task.id);
                  
                if(source == task.id )
                {
                    //task.predecessors ='';
                    if(Errorflag == 'true')
                    {
                    

                        }
                    else if(Errorflag == 'false')
                    {
                      document.getElementById("warningToastForPred1").style.display = 'none';

                    }
                    //document.getElementById("warningToastForPred1").style.display = 'block';
                    setTimeout(closewarningToastForPred1,2200); 
                    //gantt.hideLightbox();
                    return false
               
                 }
                else if( source == null || source =='' || source == undefined)
                    {
                        document.getElementById("warningToastForPred2").style.display = 'block';
                        //gantt.hideLightbox();
                        setTimeout(closewarningToastForPred2,2200); 
                        return false
                    }
                else if(source == ParentId)
                 {
                     //task.predecessors ='';
                    document.getElementById("warningToastForPred").style.display = 'block';
                     //gantt.hideLightbox();
                    setTimeout(closewarningToastForPred,2200); 
                     return false;
                 }
               
                var new_link1 = { source: source, target: task.id, type: link_type,lag:lagres} 
                gantt.addLink(new_link1);
                   
                
            }
            }
               //task.predecessors
            return true;
        });
        
        var tasklist =records;
        
        var test=0;
        
          gantt.attachEvent("onAfterTaskAdd", function(id,item){
              //gantt.config.auto_scheduling = true;
            tasklist.push(item);
            
            var task = item;
              if(task.split=='true')
              {
                  
                  task.dashboard ='true';
                  task.checked ='true';
               }
              else
              {
                  task.dashboard = 'false';
                  task.checked ='false';
                  }
            
            var predecessors_array = [];
            if (task.predecessors) predecessors_array = task.predecessors.split(",");
            var new_link =[];
            for (var j = 0; j < predecessors_array.length; j++) {
                //var predecessor_id = parseFloat(predecessors_array[j]);
                myString = predecessors_array[j];
                
                myString = myString.replace(/(?![+-]?\d*\.?\d+|e[+-]\d+)[^0-9]/g,'');
                
                if(myString.includes("+"))
                {
                    myString = myString.split("+");
                    myString = myString[0];
                    
                }
                
                else if(myString.includes("-"))
                {
                    myString = myString.split("-");
                    myString = myString[0];
                }
                var poslag;
                var neglag;
                if(predecessors_array[j].includes("+"))
                {
                    
                    poslag = predecessors_array[j].split("+");
                }
                else if(predecessors_array[j].includes("-"))
                {
                    
                    neglag = predecessors_array[j].split("-");
                    
                }
                var LagSign;
                
                if(neglag !=null && neglag != 'undefined' && neglag != ''){
                    var naglagval = parseInt(neglag[1]);
                    if(naglagval == 0)
                    {
                        naglagval = naglagval;
                    }
                    else{
                        naglagval = '-'+naglagval;
                        
                    }
                    
                    // naglagval = '-'+naglagval;
                    LagSign = naglagval;
                    
                }
                if(poslag !=null && poslag != 'undefined' && poslag != ''){
                    
                    var poslagval = parseInt(poslag[1]);
                    //poslagval ='+'+poslagval;
                    LagSign = poslagval;
                }
                
                
                var lagres;
                if(isNaN(LagSign)){
                    lagres = 0;
                    //lagres = '+'+0;
                }else{
                    
                    lagres = LagSign;
                    
                }
                var source;
                for(var k = 0; k < tasklist.length; k++)
                {
                    if(tasklist[k].RowNum ==myString && tasklist[k].id !=null)
                    {
                        
                         source=tasklist[k].id;
                        
                    }
                    
                    else if(tasklist[k].RowNum == myString)
                    {
                        source=tasklist[k].projId;
                    }
                }
                
                var link_type = parse_link_type(predecessors_array[j]);
                                 var ParentId = gantt.getParent(task.id);

                if(source == task.id)
                {
                    task.predecessors ='';
                    document.getElementById("warningToastForPred1").style.display = 'block';
                    //gantt.hideLightbox();
                    setTimeout(closewarningToastForPred1,2200); 
               
                 }
                else if( source == null || source =='' || source == undefined)
                    {
                        document.getElementById("warningToastForPred2").style.display = 'block';
                        //gantt.hideLightbox();
                        setTimeout(closewarningToastForPred2,2200); 
                        return false
                    }
                else if(source == ParentId)
                 {
                     task.predecessors ='';
                    document.getElementById("warningToastForPred").style.display = 'block';
                     //gantt.hideLightbox();
                    setTimeout(closewarningToastForPred,2200); 
                 }
              
                var new_link = { source: source, target: task.id, type: link_type,lag:lagres}      
                gantt.addLink(new_link);
                // gantt.render();
            }
              task.predecessors;
            
        });
        
        function parse_link_type(compressed_value){
            
            if (compressed_value.toLowerCase().indexOf('fs') > -1) return '0';
            if (compressed_value.toLowerCase().indexOf('ss') > -1) return '1';
            if (compressed_value.toLowerCase().indexOf('ff') > -1) return '2';
            if (compressed_value.toLowerCase().indexOf('sf') > -1) return '3';
            return '0';
        }
        //resource code start 
         // code to resource functionality 
        function shouldHighlightTask(task){
            var store = gantt.$resourcesStore;
            var taskResource = task[gantt.config.resource_property],
                selectedResource = store.getSelectedId();
            if(taskResource == selectedResource || store.isChildOf(taskResource, selectedResource)){
                return true;
            }
        }
        
        gantt.templates.grid_row_class = function(start, end, task){
            var css = [];
            if(gantt.hasChild(task.id)){
                css.push("folder_row");
            }
            
            if(task.$virtual){
                css.push("group_row")
            }
            
            if(shouldHighlightTask(task)){
                css.push("highlighted_resource");
            }
            if((task.split == "[true]"||task.split == "true")&& task.type != 'project')
            {
                task.color = '#C32B9F';
                css.push("Taskcolor"); // to show the row as gray color 
            }
            
            return css.join(" ");
        };
        
        gantt.templates.task_row_class = function(start, end, task){
            if(shouldHighlightTask(task)){
                return "highlighted_resource";
            }
            return "";
        };
        
        gantt.templates.task_cell_class = function (task, date) {
            if (!gantt.isWorkTime({date: date, task: task}))
                return "week_end";
            return "";
        };
        
        gantt.templates.resource_cell_class = function(start_date, end_date, resource, tasks){
            var css = [];
            css.push("resource_marker");
            if (tasks.length <= 1) {
                css.push("workday_ok");
            } else {
                css.push("workday_over");
            }
            return css.join(" ");
        };
        
        gantt.templates.resource_cell_value = function(start_date, end_date, resource, tasks){
            var html = "<div>"
            if(resourceMode == "hours"){
                html += tasks.length * 8;
            }else{
                html += tasks.length;
            }
            html += "</div>";
            return html;
        };
        
        function shouldHighlightResource(resource){
            var selectedTaskId = gantt.getState().selected_task;
            if(gantt.isTaskExists(selectedTaskId)){
                var selectedTask = gantt.getTask(selectedTaskId),
                    selectedResource = selectedTask[gantt.config.resource_property];
                
                if(resource.id == selectedResource){
                    return true;
                }else if(gantt.$resourcesStore.isChildOf(selectedResource, resource.id)){
                    return true;
                }
            }
            return false;
        }
        
        var resourceTemplates = {
            grid_row_class: function(start, end, resource){
                var css = [];
                if(gantt.$resourcesStore.hasChild(resource.id)){
                    css.push("folder_row");
                    css.push("group_row");
                }
                if(shouldHighlightResource(resource)){
                    css.push("highlighted_resource");
                }
                return css.join(" ");
            },
            task_row_class: function(start, end, resource){
                var css = [];
                if(shouldHighlightResource(resource)){
                    css.push("highlighted_resource");
                }
                if(gantt.$resourcesStore.hasChild(resource.id)){
                    css.push("group_row");
                }
                
                return css.join(" ");
                
            }
        };
        
        var resourceConfig = {
            scale_height: 30,
            subscales: [],
            columns: [
                {
                    name: "name", label: "Name", tree:true, width:250, template: function (resource) {
                        console.log('resource.text>>'+resource.text);
                        return resource.text;
                    }, resize: true
                },
                {
                    name: "specialty", label: "Speciality", width:150, align:"center",template: function (resource) {
                        
                        return resource.specialty || "";
                    }, resize: true
                }
                
            ]
       };
        //resource code stop 
        //delete gantt.config.types.project;
        delete gantt.config.types.milestone; // Remove milestone from Project Type
        gantt.locale.labels.section_text = "Task Name";
        gantt.locale.labels.section_resources = "Resources *";
        gantt.locale.labels.section_role = "Role *";
        gantt.locale.labels.section_predecessors = "Predecessors";
        gantt.locale.labels.section_Notes = "Task Comments";
        gantt.locale.labels.section_split = "Mark as Milestone";
      
        var opts = [
                {key:"true", label:""}                                       
            ];
            
       if(tempflag == true)
        {
            gantt.config.lightbox.sections = [
                {name: "text", height: 70, map_to: "text", type: "textarea", focus: true},
                {name: "predecessors", type: "textarea", map_to: 'predecessors', height: 38},
                {name: "type", type: "typeselect", map_to: "type"},
                {name: "split", type:"checkbox", map_to: "split", options:opts},
                //{name: "role", type: "checkbox", map_to: "users", options: getUserList(records)},
                {name: "role",height: 60, type:"multiselect", options: gantt.serverList("people"), map_to:"owner_id"},
                {name: "time", type: "duration",map_to:"auto",time_format: ["%m", "%d", "%Y"]},
                {name: "Notes", height: 70, map_to: "Notes", type: "textarea"}
            ];
        gantt.config.lightbox.project_sections = [
            {name: "text", height: 10, map_to: "text", type: "textarea", focus: true},
            {name: "predecessors", type: "textarea", map_to: 'predecessors', height: 38},
            {name: "type", type: "typeselect", map_to: "type"},
            //{name: "resources", type: "checkbox", map_to: "users", options: getUserList(records)},
            {name: "resources",height: 60, type:"multiselect", options: gantt.serverList("people"), map_to:"owner_id"},
            {name: "time", type: "duration",map_to:"auto",time_format: ["%m", "%d", "%Y"]},
            {name: "Notes", height: 10, map_to: "Notes", type: "textarea"}
        ];
        
        }
        else
        {
            
            gantt.config.lightbox.sections = [
                {name: "text", height: 10, map_to: "text", type: "textarea", focus: true},
                {name: "predecessors", type: "textarea", map_to: 'predecessors', height: 38},
                {name: "type", type: "typeselect", map_to: "type"},
                {name: "split", type:"checkbox", map_to: "split", options:opts},
                //{name: "resources", type: "checkbox", map_to: "users", options: getUserList(records)},
                {name: "resources",height: 60, type:"multiselect", options: gantt.serverList("people"), map_to:"owner_id"},
                {name: "time", type: "duration",map_to:"auto",time_format: ["%m", "%d", "%Y"]},
                {name: "Notes", height: 10, map_to: "Notes", type: "textarea"}
            ];
            
            gantt.config.lightbox.project_sections = [
                {name: "text", height: 10, map_to: "text", type: "textarea", focus: true},
                {name: "predecessors", type: "textarea", map_to: 'predecessors', height: 38},
                {name: "type", type: "typeselect", map_to: "type"},
                //{name: "resources", type: "checkbox", map_to: "users", options: getUserList(records)},
                {name: "resources",height: 60, type:"multiselect", options: gantt.serverList("people"), map_to:"owner_id"},
                {name: "time", type: "duration",map_to:"auto",time_format: ["%m", "%d", "%Y"]},
                {name: "Notes", height: 10, map_to: "Notes", type: "textarea"}
            ]; 
        }
        gantt.config.resource_store = "resource";
        gantt.config.resource_property = "owner_id";
        gantt.config.resource_store = "role";
        gantt.config.resource_property = "role";
        
        
        /* gantt.templates.rightside_text = function(start, end, task){
            if(task.type == gantt.config.types.milestone){
                task=task.type;
                return task.text;
            }
            return "";
        };*/
        
        var colContent = function (task) {
            return ('<a class="link" onclick="taskDetail('+task.id+')"><svg class="slds-icon slds-icon-text-default slds-icon--x-small"><use href="{!URLFOR($Resource.SLDS, '/assets/icons/utility-sprite/svg/symbols.svg#new_window')}"></use></svg></a>');
                    };
                    
                    
                    var tasklist =records;  
                    
                    function taskDetail(id, action)
            {
                var recordid;
                var iddup = id;
                for(var i = 0; i < tasklist.length; i++){
                    if(iddup == tasklist[i].projId){
                        recordid =  tasklist[i].sfdcid;
                        
                        window.open('/'+recordid,'_blank');
                        return true;
                    }
                    else if(iddup != tasklist[i].projId)
                    {
                        document.getElementById("warningToast").style.display = 'block'; 
                        setTimeout(closewarningToast,1200); 
                    } 
                    
                }
            }
            /*gantt.attachEvent("onTaskRowClick", function(id,row){
                
                var checkbox = row.querySelector(".gantt-checkbox-column");
                console.log('id in event ::'+id);
                console.log('row in event ::'+row);
                console.log('checkbox in event ::'+checkbox);
                if(checkbox != null && checkbox != undefined)
                {
                    //alert('inside inner if');
                    if(checkbox){
                        //alert('inside if ');
                        checkbox.checked = !!checkbox.checked;
                        gantt.getTask(id).checked = checkbox.checked;
                        //alert.log('result in inner if:'+gantt.getTask(id).checked);
                        return false;
                    }
                    else{
                        //alert('result in inner else:'+gantt.getTask(id).checked);
                        //console.log('inside else checked?'+row.checked);
                        return false; 
                    }
                }
                else{
                    //alert('inside  outer else');
                    gantt.getTask(id).checked = row.checked;
                    tempche = gantt.getTask(id).checked
                    //alert('result in outer else:'+tempche);
                    return true;
                }
                
            });*/
            
           
            
            //for template flow 
            
            
            if(tempflag == true)
            {
                gantt.config.drag_progress = false;
                gantt.config.columns = [
                {name:"add",width:40},
                {name:"farol",label:"Status",width:50,min_width:50, align: "center", template:function(obj){
                var color = statuscheck(obj);
                return "<div class='column_icon' style=background-color:"+color+"></div>"} 
                },
                {
                    name: "buttons",label:'<svg class="slds-icon slds-icon-text-default slds-icon--x-small slds-m-top_medium" style="fill:rgba(0, 0, 0, 0.7);"><use href="{!URLFOR($Resource.SLDS, '/assets/icons/utility-sprite/svg/symbols.svg#new_window')}"></use></svg>',width: 40,min_width: 40,
                    template: colContent
                },   
                {name:"RowNum",label:"Row #", width: 50,min_width: 50, align: "center",resize: true,template:gantt.getTaskNumber},
                {name: "wbs", label: "WBS", width: 60,min_width: 60,resize: true, align: "center", template: gantt.getWBSCode},
                
                {name: "text", label: "Task Name", tree: true, width: 150,min_width: 150, align: "left",editor: editors.text, resize: true},        
                {name: "start_date", label: "Start",  width: 120,min_width: 120,editor: editors.start_date, align: "center",  resize: true},      
                {name: "end_date", label: "Projected Finish",width: 120,min_width: 120, editor: editors.end_date, align: "center", template:formatEndDate, resize: true},
                {name: "actual_finish", label: "Actual Finish", width:100,min_width: 180, editor: editors.actual_finish ,align: "center", resize: true,
                    template : function(task)
                    {
                        var actual_finish = task.actual_finish;
                        // var actual_finish = gantt.date.add(task.actual_finish, -1, gantt.config.duration_unit);
                    if(actual_finish == null)
                    {
                    actual_finish ='N/A';
                    }
                    else{
                        //actual_finish = gantt.date.add(actual_finish, -1, gantt.config.duration_unit);
                        actual_finish = actual_finish;
                    }
                    return actual_finish;
                    }
                    },
                {name: "duration", label:'<svg class="slds-icon slds-icon-text-default slds-icon--small slds-m-top_small" style="fill:rgba(0, 0, 0, 0.7); width:20px "><use href="{!URLFOR($Resource.SLDS, '/assets/icons/utility-sprite/svg/symbols.svg#clock')}"></use></svg>',width:40,min_width: 40, align: "center", editor: editors.duration, resize: true},
                {name: "predecessors", label: "Predecessors",width: 100,min_width: 100, editor: editors.predecessors, align: "center", resize: true,template: function(task){
                    var links = task.$target;
                    var labels = [];
                    var types = [];
                    
                    for(var i = 0; i < links.length; i++){
                        var link = gantt.getLink(links[i]);
                        //alert('link'+JSON.stringify(link));
                        var pred = gantt.getTask(link.source);
                        // alert('pred'+JSON.stringify(pred));
                        var index = pred.$index;
                        index = index+1;
                        var typ = link.type;
                        var lag = link.lag;
                        if(typ == 0){
                            typedup = 'FS';
                        }
                        else if(typ == 1){
                            typedup = 'SS';
                        }
                            else if(typ == 2){
                                typedup = 'FF';
                            }
                                else if(typ == 3){
                                    typedup = 'SF';
                                }
                        var sign;
                        if(lag >= 0){
                            sign ='+';
                        }
                        else{
                            sign ='';  
                        }
                        
                        //alert('lag>>'+lag);
                        if(lag == null || lag == '' || lag == undefined)
                        {
                            labels.push(gantt.getTaskNumber(pred)+typedup);
                        }
                        else
                        { 
                            labels.push(gantt.getTaskNumber(pred)+typedup+sign+lag+'days');
                    }
                }
                return labels.join(", ")
            }},
                    
                    //{name: "owner", label: "Owner", width: 90,min_width: 90, align: "center", editor: editors.owner, template: ownerLabel, resize: true},
                 {name: "owner", align: "center", width: 80, label: "Role", resize: true,
            template: function (task) {
            if (task.type == gantt.config.types.project) {
            return "";
            }
            //alert('task.owner_id>>'+task.owner_id);
            //alert('task.owner_id.length>>'+task.owner_id.length);

            var result = "";
            var store = gantt.getDatastore("resource");
            //alert('store>>'+JSON.stringify(store));
            var owners = task[gantt.config.resource_property];
            //alert('owners>>'+JSON.stringify(owners));

            if (!owners || !owners.length) {
            return "Unassigned";
            }

            if(owners.length == 1){
            //return store.getItem(owners[0]).text;
            }

            owners.forEach(function(ownerId) 
            {
                   var owner = store.getItem(ownerId);
                //console.log('owner>>'+JSON.stringify(owner)); 
                   if (!owner)
                       return;
                   if(owner.text == '' && owner.textLN !='' && owner.specialty !='') //only first name is empty 
                   {
                       var copy = owner.specialty;// only role
                   }
                   else if(owner.text != '' && owner.textLN =='' && owner.specialty !='') //only last name is empty 
                   {
                       var copy = owner.specialty;
                   }
                   else if(owner.text != '' && owner.textLN !='' && owner.specialty =='') //only role name is empty 
                   {
                       var copy = owner.text+' '+owner.textLN ;
                   }
                   else if(owner.text == '' && owner.textLN =='' && owner.specialty !='') //only first and last name is empty 
                   {
                       var copy = owner.specialty;
                   }
                   else if(owner.text != '' && owner.textLN =='' && owner.specialty =='') //only last name and role is empty 
                   {
                       var copy = owner.text;
                   }
                   else if(owner.text == '' && owner.textLN !='' && owner.specialty =='') //only first name and role is empty 
                   {
                       var copy = owner.textLN;
                   }
                   else if(owner.text != '' && owner.textLN !='' && owner.specialty !='') //nothing is empty 
                   {
                       var copy = owner.specialty;
                   } 
                //console.log('copy>>'+copy);
                   if(result != "")
                   {
                       result = result+','+copy;
                   }else{
                       result = copy ;
                   }
               });
                //console.log('result'+result);
            return result;
            }
            },
                
                {name: "priority", label: "Priority", width: 100,min_width: 100, align: "center", editor: editors.priority, template: priorityLabel, resize: true},
                {name: "Notes", label: "Comments",width:90,min_width: 90, align: "center", editor: editors.Notes,resize: true}

            ];
            }
    // for project flow 
            else
            {
            gantt.config.drag_progress = true;
            gantt.config.columns = [
                {name:"add",width:40,min_width: 40,resize: true},
                    
                    {name:"farol",label:"Status", width:50,min_width:50 , align: "center", template:function(obj){
                var color = statuscheck(obj);
                return "<div class='column_icon' style=background-color:"+color+"></div>"} 
                }, 
                {
                    name: "buttons",label:'<svg class="slds-icon slds-icon-text-default slds-icon--x-small slds-m-top_medium" style="fill:rgba(0, 0, 0, 0.7);"><use href="{!URLFOR($Resource.SLDS, '/assets/icons/utility-sprite/svg/symbols.svg#new_window')}"></use></svg>',width: 40,min_width: 40,
                    template: colContent
                },
                    
                {name:"RowNum",label:"Row #",  width: 50,min_width: 50, align: "center",resize: true,template:gantt.getTaskNumber},
                {name: "wbs", label: "WBS",width: 60,min_width: 60,align: "center",resize: true, template: gantt.getWBSCode},
                
                {name: "text", label: "Task Name", tree: true, width: 150,min_width: 150,align: "left", editor: editors.text, resize: true},        
                {name: "start_date", label: "Start",  width: 120,min_width: 120,editor: editors.start_date, align: "center",  resize: true},      
                {name: "end_date", label: "Projected Finish",width: 120,min_width: 120, editor: editors.end_date, align: "center", template:formatEndDate, resize: true},
                {name: "actual_finish", label: "Actual Finish", width:100,min_width: 180, editor: editors.actual_finish ,align: "center", resize: true,
                    template : function(task)
                    {
                    var actual_finish = task.actual_finish;
                    if(actual_finish == null)
                    {
                    actual_finish ='N/A';
                    }
                    else{
                    //actual_finish = gantt.date.add(actual_finish, -1, gantt.config.duration_unit);
                    actual_finish = actual_finish;
                    }
                    return actual_finish;
                    }
                    },

                 {name: "duration", label:'<svg class="slds-icon slds-icon-text-default slds-icon--small slds-m-top_small" style="fill:rgba(0, 0, 0, 0.7); width:20px "><use href="{!URLFOR($Resource.SLDS, '/assets/icons/utility-sprite/svg/symbols.svg#clock')}"></use></svg>',width:40,min_width: 40, align: "center", editor: editors.duration, resize: true},
                
                {name: "predecessors", label: "Predecessors",width:100,min_width: 100, align: "center",editor: editors.predecessors, resize: true,template: function(task){
                    var links = task.$target;
                    var labels = [];
                    var types = [];
                    
                    for(var i = 0; i < links.length; i++){
                        var link = gantt.getLink(links[i]);
                        //alert('link'+JSON.stringify(link));
                        var pred = gantt.getTask(link.source);
                        // alert('pred'+JSON.stringify(pred));
                        var index = pred.$index;
                        index = index+1;
                        var typ = link.type;
                        var lag = link.lag;
                        if(typ == 0){
                            typedup = 'FS';
                        }
                        else if(typ == 1){
                            typedup = 'SS';
                        }
                            else if(typ == 2){
                                typedup = 'FF';
                            }
                                else if(typ == 3){
                                    typedup = 'SF';
                                }
                        var sign;
                        if(lag >= 0){
                            sign ='+';
                        }
                        else{
                            sign ='';  
                        }
                        
                        //alert('lag>>'+lag);
                        if(lag == null || lag == '' || lag == undefined)
                        {
                            labels.push(gantt.getTaskNumber(pred)+typedup);
                        }
                        else
                        { 
                            labels.push(gantt.getTaskNumber(pred)+typedup+sign+lag+'days');
                            
                    }
                }
                return labels.join(", ")
            }},
            
            //{name: "owner", label: "Owner",width:90,min_width: 90, align: "center", editor: editors.owner, template: ownerLabel, resize: true},
               {name: "owner", align: "center", width: 80, label: "Resources", resize: true,
                    template: function (task) {
                        if (task.type == gantt.config.types.project) {
                            return "";
                        }
                        //alert('task.owner_id>>'+task.owner_id);
                        //alert('task.owner_id.length>>'+task.owner_id.length);
                        
                        var result = "";
                        var store = gantt.getDatastore("resource");
                        //alert('store>>'+JSON.stringify(store));
                        var owners = task[gantt.config.resource_property];
                        //alert('owners>>'+JSON.stringify(owners));
                        
                        if (!owners || !owners.length) {
                            return "Unassigned";
                        }
                        
                        if(owners.length == 1){
                            //return store.getItem(owners[0]).text;
                        }
                        
                        owners.forEach(function(ownerId) 
                        {
                                           var owner = store.getItem(ownerId);
                            //console.log('owner>>'+JSON.stringify(owner)); 
                                           if (!owner)
                                               return;
                                           if(owner.text == '' && owner.textLN !='' && owner.specialty !='') //only first name is empty 
                                           {
                                               //var copy = owner.textLN+'('+owner.specialty+')';
                                               var copy = owner.textLN;
                                           }
                                           else if(owner.text != '' && owner.textLN =='' && owner.specialty !='') //only last name name is empty 
                                           {
                                               //var copy = owner.text+'('+owner.specialty+')';
                                               var copy = owner.text;
                                           }
                                           else if(owner.text != '' && owner.textLN !='' && owner.specialty =='') //only specialty(role) is empty 
                                           {
                                               var copy = owner.text+' '+owner.textLN ;
                                           }
                                           else if(owner.text == '' && owner.textLN =='' && owner.specialty !='') //only first and last name is empty 
                                           {
                                               var copy = owner.specialty;
                                           }
                                           else if(owner.text != '' && owner.textLN =='' && owner.specialty =='') //only last and role name is empty 
                                           {
                                               var copy = owner.text;
                                           }
                                           else if(owner.text == '' && owner.textLN !='' && owner.specialty =='') //only firstand role name is empty 
                                           {
                                               var copy = owner.textLN;
                                           }
                                               else if(owner.text != '' && owner.textLN !='' && owner.specialty !='') // nothing is empty  
                                           {
                                               //var copy = owner.text+' '+owner.textLN+'('+owner.specialty+')';
                                               var copy = owner.text+' '+owner.textLN;
                                           }
                                           if(result != "")
                                           {
                                               result = result+','+copy;
                                           }else{
                                               result = copy ;
                                           }
                                       });
                        return result;
                    }
                },

                
                {name: "priority", label: "Priority",width:100,min_width: 100, align: "center", editor: editors.priority, template: priorityLabel, resize: true},
                {name: "Notes", label: "Comments",width:90,min_width: 90, align: "center", editor: editors.Notes,resize: true}

                    /*  {name: "progress", label: "Progress %",  width: 120,min_width: 120,resize: true,editor: editors.progress, align: "center", template: function (task) {
                var progress = task.progress || 0;
                            var progressStr = progress.toString();
                            if(progressStr.indexOf('0.')> -1){
                                task.progress = progress;
                                progress = progress*100
                            }else if(progressStr == '1'){
                                task.progress = progress;
                                progress = progress*100
                            }else{
                                task.progress = progress/100;
                            }
                            return progress + "% </span>";
                        }
                        },*/
                           
                 ];
            }
        function checkbox_check(id){
        var task = gantt.getTask(id);
        var taskBoolVal = 'false';
        if(task.checked == 'false'){
           taskBoolVal = 'true';
        }
        task.checked = taskBoolVal;
        gantt.updateTask(id);
       
        };
        function dashboardcheck(id){
        var task = gantt.getTask(id);
        var taskBoolVal = 'false';
        if(task.dashboard == 'false'){
           taskBoolVal = 'true';
        }
        task.dashboard = taskBoolVal;
        gantt.updateTask(id);
       
        };
        
        //status-code
        function statuscheck(idobj)
        {
            // var task = gantt.getTask(idobj);
            //console.log('statuscheck>>'+JSON.stringify(idobj));
            var status = '';
            if(idobj.progress != '' && idobj.progress != null && idobj.progress != undefined
               && idobj.progress == 100)
            {
                status = '#3813AD';     //blue
            }
            else if(idobj.progress != '' && idobj.progress != null && idobj.progress != undefined
               && idobj.progress == 1)
            {
                status = '#3813AD';     //blue
            }
            else if(idobj.type == 'project' && idobj.actual_finish != 'N/A' )
            {
                status = '#3813AD';     //blue
            }
            else if(idobj.end_date != '' && idobj.end_date != null && idobj.end_date != undefined){
                
                var currentDate=new Date();
                var nextDayDate;
                var tempDate=currentDate;
                var finishDate=new Date(idobj.end_date);
                var count=0;
                if(currentDate>finishDate)
                {
                    status = '#C00000';         //red   
                }else{
                    do
                    {
                        if(!checkHoliday(tempDate,holiday_data) && !checkWeekEndDay(tempDate))
                        {
                            count=count+1;
                        }
                        nextDayDate= new Date(tempDate);
                        nextDayDate.setDate(tempDate.getDate()+1);
                        tempDate=nextDayDate;
                    }while(tempDate<=finishDate);
                    
                    if(count>4)
                    {
                        status= '#00B050';          //green
                    }
                    else if(count>2)
                    {
                        status= '#ffcc00';          //yellow
                    }
                        else
                        {
                            status= '#C00000';      //red
                        }
                    
                }
            }
            return status;
        }
        
        function checkHoliday(dateToCheck,holidayData) 
        {
            var isHoliday=false;
            for(var eachHoliday in holidayData)
            {
                if(dateToCheck.getTime() === eachHoliday)
                {
                    isHoliday=true;
                }
            }
            return isHoliday;
        }
        
        function checkWeekEndDay(dateToCheck) 
        {
            var isWeekendDay=false;
            if(dateToCheck.getDay() == 0 || dateToCheck.getDay() == 6 )
            {
                isWeekendDay=true;
            }
            
            return isWeekendDay;
            
        }
        
        gantt.ext.inlineEditors.attachEvent("onEditStart", function(state){
            if (state.columnName == "progress"){    
                var task = gantt.getTask(state.id);
                var element = document.getElementsByTagName("input");
                for(var i in element){
                    if(element[i].name == "progress"){
                      element[i].value = parseInt(element[i].value * 100);
                    }
                }
                
            }
        });
        
        //gantt.config.order_branch = true;
        //gantt.config.open_tree_initially = true;
        gantt.config.layout = {
            css: "gantt_container",
            rows: [
                {
                    cols: [
                        {view: "grid", group:"grids", scrollY: "scrollVer"},
                        {resizer: true, width: 1},
                        {view: "timeline", scrollX: "scrollHor", scrollY: "scrollVer"},
                        {view: "scrollbar", id: "scrollVer", group:"vertical"}
                    ],
                    gravity:2
                },
                {resizer: true, width: 1},
                {
                    config: resourceConfig,
                    cols: [
                        {view: "resourceGrid", group:"grids", width: 300, scrollY: "resourceVScroll" },
                        {resizer: true, width: 1},
                        {view: "resourceTimeline", scrollX: "scrollHor", scrollY: "resourceVScroll"},
                        {view: "scrollbar", id: "resourceVScroll", group:"vertical"}
                    ],
                    gravity:1
                },
                {view: "scrollbar", id: "scrollHor"}
            ]
        };
        
        //resource ends---------------------------------
        gantt.config.layout = {
            css: "gantt_container",
            cols: [
                {
                    width:1200,
                    min_width: 1200,
                    rows:[
                        {view: "grid", scrollX: "gridScroll", scrollable: true, scrollY: "scrollVer"},
                        {view: "scrollbar", id: "gridScroll", group:"horizontal"}
                    ]
                },
                {resizer: true, width: 10},
                {
                    rows:[
                        {view: "timeline", scrollX: "scrollHor", scrollY: "scrollVer"},
                        {view: "scrollbar", id: "scrollHor", group:"horizontal"}
                    ]
                },
                {view: "scrollbar", id: "scrollVer"}
            ]
        };
        //resource code start ---------------
         gantt.config.resource_store = "resource";
        gantt.config.resource_property = "owner_id";
        // gantt.config.order_branch = true;
        //gantt.config.open_tree_initially = true;
        gantt.config.scale_height = 50;
        gantt.$resourcesStore = gantt.createDatastore({
            name: gantt.config.resource_store,
            type: "treeDatastore",
            initItem: function (item) {
                item.parent = item.parent || gantt.config.root_id;
                item[gantt.config.resource_property] = item.parent;
                item.open = true;
                return item;
            }
        });
        
        gantt.$resourcesStore.attachEvent("onAfterSelect", function(id){
            gantt.refreshData();
        });
        
        //gantt.init("gantt_here");
        
        
        function toggleGroups(input) {
            gantt.$groupMode = !gantt.$groupMode;
            if (gantt.$groupMode) {
                input.value = "show gantt view";
                
                var groups = gantt.$resourcesStore.getItems().map(function(item){
                    var group = gantt.copy(item);
                    group.group_id = group.id;
                    group.id = gantt.uid();
                    return group;
                });
                
                gantt.groupBy({
                    groups: groups,
                    relation_property: gantt.config.resource_property,
                    group_id: "group_id",
                    group_text: "text",
                    delimiter: ", ",
                    default_group_label: "Not Assigned"
                });
            } else {
                input.value = "show resource view";
                gantt.groupBy(false);
            }
        }
        
        if(tempflag == true)
        {
            //alert('inside if event ');
             gantt.$resourcesStore.attachEvent("onParse", function(){
            var people = [];
            gantt.$resourcesStore.eachItem(function(res){
                if(!gantt.$resourcesStore.hasChild(res.id))
                {
                    var copy = gantt.copy(res);
                    copy.key = res.id;
                    if(res.text == '' && res.textLN !='' && res.specialty !='') //only first name is empty 
                    {
                        copy.label = res.specialty;
                    }
                    else if(res.text != '' && res.textLN =='' && res.specialty !='') //only first name is empty 
                    {
                        copy.label = res.specialty;
                    }
                    else if(res.text != '' && res.textLN !='' && res.specialty =='') //only first name is empty 
                    {
                        copy.label = res.text+' '+res.textLN ;
                    }
                    else if(res.text == '' && res.textLN =='' && res.specialty !='') //only first name is empty 
                    {
                        copy.label = res.specialty;
                    }
                    else if(res.text != '' && res.textLN =='' && res.specialty =='') //only first name is empty 
                    {
                        copy.label = res.text;
                    }
                    else if(res.text == '' && res.textLN !='' && res.specialty =='') //only first name is empty 
                    {
                        copy.label = res.textLN;
                    }
                    else if(res.text != '' && res.textLN !='' && res.specialty !='') //only first name is empty 
                    {
                        copy.label = res.specialty;
                    }
                    
                    people.push(copy);
                    //console.log('people>>'+people);
                }
            });
            gantt.updateCollection("people", people);
        });
        }
        else{
                //alert('inside else event ');
            gantt.$resourcesStore.attachEvent("onParse", function(){
            var people = [];
            gantt.$resourcesStore.eachItem(function(res){
                if(!gantt.$resourcesStore.hasChild(res.id))
                {
                    var copy = gantt.copy(res);
                    copy.key = res.id;
                    if(res.text == '' && res.textLN !='' && res.specialty !='') //only first name is empty 
                    {
                        copy.label = res.textLN;
                    }
                    else if(res.text != '' && res.textLN =='' && res.specialty !='') //only first name is empty 
                    {
                        copy.label = res.text;
                    }
                    else if(res.text != '' && res.textLN !='' && res.specialty =='') //only first name is empty 
                    {
                        copy.label = res.text+' '+res.textLN ;
                    }
                    else if(res.text == '' && res.textLN =='' && res.specialty !='') //only first name is empty 
                    {
                        copy.label = res.specialty;
                    }
                    else if(res.text != '' && res.textLN =='' && res.specialty =='') //only first name is empty 
                    {
                        copy.label = res.text;
                    }
                    else if(res.text == '' && res.textLN !='' && res.specialty =='') //only first name is empty 
                    {
                        copy.label = res.textLN;
                    }
                    else if(res.text != '' && res.textLN !='' && res.specialty !='') //only first name is empty 
                    {
                        copy.label = res.text+' '+res.textLN;
                    }
                    
                    people.push(copy);
                    //console.log('people>>'+people);
                    
                }
            });
            gantt.updateCollection("people", people);
        });
       }
       
        var resourceArr = [
            
          <apex:repeat value="{!IPMupdateList}" var="reso">
            {
            id: '{!reso.id}', 
            text: "{!reso.First_Name__c}",
            textLN: "{!reso.Last_Name__c}",
            specialty: "{!reso.Roles__c}"
            },
            </apex:repeat>
        ]
        gantt.$resourcesStore.parse(resourceArr);
		gantt.init('gantt_here');
        //resource code end --------------
        
        
        gantt.attachEvent("onTaskCreated", function(task){
            isnewtask=true;
            task.priority = "Low";
            if(task.type == gantt.config.types.placeholder){
                task.text = "New Task";
            }
            return true;
        });
         
        //--------------------- new code to datepicker ---------------
        
        var edited_task = null;
        
        function process_end_date(value){
            var task = gantt.getTask(edited_task);                  //to get the enddate from task 
            if(!gantt.isWorkTime(task.end_date))                    //to apply holiday if selected input is holiday
            {
                task.end_date = gantt.getClosestWorkTime({date:task.end_date, dir:"past" });
                task.end_date = gantt.date.add(task.end_date, value, gantt.config.duration_unit);
            }
            else
            {
                task.end_date = gantt.date.add(task.end_date, value, gantt.config.duration_unit);
                console.log('after timezone apply>>'+JSON.stringify(task.end_date));
            }
        }
         
        function process_progress(value){
            
            var task = gantt.getTask(edited_task);
            
            var progress = task.progress || 0;
            var progressStr = progress.toString();
            if(progressStr.indexOf('0.')> -1){
                task.progress = progress;
                progress = progress*100
            }else if(progressStr == '1'){
                task.progress = progress;
                progress = progress*100
            }else{
                task.progress = progress/100;
            }
            task.progress = progress;
            console.log('task.progress in process>>'+task.progress);
        }
       
       var initial_text,initial_start_date, initial_end_date,initial_duration,initial_duration1,initial_end_date1,actual_date,initial_actual_finish,initial_progress,start_duration,actual_startdate,actual_enddate,actual_duration,initial_predecessor,actual_stdate,actual_enddate;
        
       gantt.ext.inlineEditors.attachEvent("onBeforeEditStart", function(state){
           var date_type = state.columnName;
           if(date_type == "text")
               {
                   initial_text = gantt.getTask(state.id).text;
               }
           if (date_type == "end_date"){
               edited_task = state.id;
               //if(gantt.getTask(state.id).type != 'milestone')
               //{
                    process_end_date(-1)
                    //}
               initial_start_date = gantt.getTask(state.id).start_date;
               actual_enddate = gantt.getTask(state.id).end_date;
               actual_duration = gantt.getTask(state.id).duration;
           }
           if (date_type == "duration"){
               initial_duration1 = gantt.getTask(state.id).duration;
               initial_end_date1 = gantt.getTask(state.id).end_date
               }
           if (date_type == "start_date") {
               initial_end_date = gantt.getTask(state.id).end_date
               actual_startdate = gantt.getTask(state.id).start_date
               start_duration = gantt.getTask(state.id).duration
           }
           
           if(date_type == "predecessors") 
           {
               initial_duration = gantt.getTask(state.id).duration;
               initial_predecessor = gantt.getTask(state.id).predecessors;
           }
           if(date_type == "actual_finish") 
           {
               initial_actual_finish = gantt.getTask(state.id).actual_finish
               actual_stdate = gantt.getTask(state.id).start_date
               actual_enddate = gantt.getTask(state.id).end_date
           }
           
           if(date_type == "progress") 
           {
               edited_task = state.id;
               initial_progress = edited_task.progress;
                process_progress(initial_progress)
                console.log('edited_task>>'+edited_task);
           }
           
                //gantt.render();
            });
         
        gantt.ext.inlineEditors.attachEvent("onEditEnd", function(state){
                if (state.columnName == "end_date") {
                    //if(gantt.getTask(state.id).type != 'milestone')
                    //{
                        process_end_date(1);
                    //}
                    
                    gantt.updateTask(state.id);
                    gantt.autoSchedule(state.id);
                    //gantt.render();
                }
                if (state.columnName == "duration") {
                    /*if(task.duration == 0)
                   
                    {
                        task.duration = initial_duration1;
                        task.end_date = initial_end_date1;
                    }*/
                if(gantt.getTask(state.id).duration == 0)
                   
                    {
                        gantt.getTask(state.id).duration = initial_duration1;
                        gantt.getTask(state.id).end_date = initial_end_date1;
                    }
                    
                    gantt.render();
                }
                
            }); 
         
        gantt.attachEvent("onBeforeTaskUpdate", function(id,new_item){
            
            var task = gantt.getTask(id);
            if(!gantt.isWorkTime(new_item.start_date)) {
                new_item.start_date = gantt.getClosestWorkTime({date:new_item.start_date, dir:"future" });
            }
            if(!gantt.isWorkTime(new_item.end_date)) {
                    new_item.end_date = gantt.getClosestWorkTime({date:new_item.end_date, dir:"past" });
            }
            if(new_item.actual_finish != null && new_item.actual_finish != '' && new_item.actual_finish != 'N/A' && new_item.actual_finish != undefined)
            {
                if(!gantt.isWorkTime(new_item.actual_finish)) {
                     new_item.actual_finish = gantt.getClosestWorkTime({date:new_item.actual_finish, dir:"past" });
                    new_item.actual_finish = gantt.date.add(new_item.actual_finish, -1, 'day');
                }
            }
        });
        
        gantt.ext.inlineEditors.attachEvent("onBeforeSave", function(state){
            var date_type = state.columnName;
           if(date_type == "end_date")
           {
               if(state.newValue != null)
               {
                   gantt.getTask(state.id).end_date = state.newValue
                   if(!gantt.isWorkTime(gantt.getTask(state.id).end_date))                              //before saving to gantt if selected sunday then set the date to friday and save as friday to gantt,
                   {
                       gantt.getTask(state.id).end_date = gantt.getClosestWorkTime({date:gantt.getTask(state.id).end_date, dir:"past" });
                   }
               }
           }
            if(date_type == "actual_finish")
             {
                if(state.newValue == null)
                    {
                        gantt.getTask(state.id).actual_finish ='N/A';
                        gantt.getTask(state.id).progress = 0;
                        if (gantt.getTask(state.id).parent > 0 && gantt.getTask(state.id).actual_finish =='N/A')
                        {
                            
                            Null_actual_finish(gantt.getTask(state.id).parent);
                        }
                    }
                else 
                    {
                         gantt.getTask(state.id).actual_finish = state.newValue
                        if(!gantt.isWorkTime(gantt.getTask(state.id).actual_finish)) {
                            gantt.getTask(state.id).actual_finish = gantt.getClosestWorkTime({date:gantt.getTask(state.id).actual_finish, dir:"past" });
                        }
                        //gantt.getTask(state.id).actual_finish = state.oldValue;
                        if(gantt.getTask(state.id).parent >0 && 
                       gantt.getTask(state.id).actual_finish != null && gantt.getTask(state.id).actual_finish !='' && 
                       gantt.getTask(state.id).actual_finish != undefined && gantt.getTask(state.id).actual_finish !='N/A'){
                        parenttasktype = gantt.getTask(gantt.getTask(state.id).parent);
                        childIds = gantt.getChildren(gantt.getTask(state.id).parent);
                        var ChildTask =[];
                        for(var child =0 ; child < childIds.length ; child++)
                        {
                            
                            var childtaskInd = gantt.getTask(childIds[child]);
                            ChildTask.push(childtaskInd);
                        }
                        var dates =[];
                        if(ChildTask.length > 0){
                            for(var d=0 ; d<ChildTask.length; d++)
                            {
                                dates.push(ChildTask[d].actual_finish);
                            }
                            
                        }
                        
                        var maxDate=new Date(Math.max.apply(null,dates));
                        var today = new Date();
                        
                        if(maxDate =='Invalid Date' || maxDate > today){
                            //parenttasktype.actual_finish = 'N/A';
                            
                        }
                        else{
                            //parenttasktype.actual_finish = maxDate;
                            get_max_actual_finish(gantt.getTask(state.id).parent)
                        }
                        
                        
                    }
                    }
                 //gantt.updateTask(state.id);
                 //gantt.render();
                }
           
           return true;
        });
        
        gantt.ext.inlineEditors.attachEvent("onSave", function(state){
            var col = state.columnName;
            if(gantt.autoSchedule && (col == "start_date" || col == "end_date" || col == "duration" || col == "progress")){
                gantt.autoSchedule();
            }
             var date_type = state.columnName;
             if(date_type == "text")
                 {
                     
                     if(gantt.getTask(state.id).text == null || gantt.getTask(state.id).text ==''|| gantt.getTask(state.id).text == undefined)
                     {
                         document.getElementById("warningToastFortext").style.display = 'block';
                         setTimeout(closewarningText,1200);
                         gantt.getTask(state.id).text = initial_text;
                         
                     }
                }
                if (date_type == "start_date"){ 
                    
                    //actual finish has value start_date should not change
                    if(gantt.getTask(state.id).actual_finish != null && gantt.getTask(state.id).actual_finish != '' && gantt.getTask(state.id).actual_finish != undefined && gantt.getTask(state.id).actual_finish != 'N/A')
                    {
                        gantt.getTask(state.id).start_date = actual_startdate;
                        gantt.getTask(state.id).end_date =  initial_end_date;
                        gantt.getTask(state.id).duration = start_duration;
                    }
                    else
                    {
                        gantt.getTask(state.id).duration = start_duration;
                        gantt.getTask(state.id).start_date = gantt.getTask(state.id).start_date;
                        }
                }
                if (date_type == "end_date")
                { 
                    if(gantt.getTask(state.id).predecessors != null && gantt.getTask(state.id).predecessors != '' && gantt.getTask(state.id).predecessors != undefined)
                    {
                        gantt.getTask(state.id).end_date = actual_enddate;
                    }
                    else
                        {
                            gantt.getTask(state.id).end_date = gantt.getTask(state.id).end_date;
                        }
                    //Updating end_date with actual_finish when change actual_finish 
                    if(gantt.getTask(state.id).actual_finish != null && gantt.getTask(state.id).actual_finish != '' && gantt.getTask(state.id).actual_finish != undefined && gantt.getTask(state.id).actual_finish != 'N/A')
                    {
                        gantt.getTask(state.id).end_date = gantt.getTask(state.id).actual_finish;
                        gantt.getTask(state.id).duration =actual_duration;
                        gantt.getTask(state.id).start_date = initial_start_date;
                    }
                    else
                    {
                        gantt.getTask(state.id).start_date = initial_start_date;
                        gantt.getTask(state.id).end_date = gantt.getTask(state.id).end_date;
                        }
                    
                    // if end date is updating less than start date, change start_date with end_date 
                   if(gantt.getTask(state.id).type != 'milestone')
                   {
                        if(gantt.getTask(state.id).end_date < gantt.getTask(state.id).start_date)
                        {
                            gantt.getTask(state.id).start_date = gantt.getTask(state.id).end_date;
                            if(!gantt.isWorkTime(gantt.getTask(state.id).start_date)) 
                            {
                                var temp = gantt.getClosestWorkTime({date:gantt.getTask(state.id).start_date, dir:"past" });
                                gantt.getTask(state.id).start_date = gantt.date.add(temp, -1, 'day');
                                console.log('temp>>'+gantt.getTask(state.id).start_date);
                                gantt.render();
                            }
                        }
                        else
                        {
                            gantt.getTask(state.id).start_date = gantt.getTask(state.id).start_date;
                        }
                    }
                }
            
             if(date_type == 'duration')
              {
                  // If actual finish is not null,duration should not change.
                  if(gantt.getTask(state.id).actual_finish != null && gantt.getTask(state.id).actual_finish != '' && gantt.getTask(state.id).actual_finish != undefined && gantt.getTask(state.id).actual_finish != 'N/A')
                    {
                        //gantt.getTask(state.id).start_date = initial_start_date;
                        gantt.getTask(state.id).end_date = gantt.date.add(gantt.getTask(state.id).actual_finish, 1, gantt.config.duration_unit);
                        }
              }
                
                if(state.columnName == "actual_finish")
                {
                    // if actual_finish is less than start_date, then start_date and end_date set to be with actual_finish and duration is 1
                    if(gantt.getTask(state.id).actual_finish < gantt.getTask(state.id).start_date)
                    {
                        gantt.getTask(state.id).start_date = gantt.getTask(state.id).actual_finish;
                        gantt.getTask(state.id).end_date= gantt.date.add(gantt.getTask(state.id).actual_finish, 1, gantt.config.duration_unit);
                         gantt.getTask(state.id).duration = 1;
                        gantt.getTask(state.id).progress = 100;
                    }
                    else
                        {
                    gantt.getTask(state.id).end_date = gantt.getTask(state.id).actual_finish;
                    gantt.getTask(state.id).end_date= gantt.date.add(gantt.getTask(state.id).end_date, 1, gantt.config.duration_unit);
                    gantt.getTask(state.id).progress = 100;
                            }
                    
                     var today = new Date();
                   
                    
                    if(gantt.getTask(state.id).actual_finish > today)
                    {
                        document.getElementById("warningToastForActualfinish").style.display = 'block';
                        setTimeout(closewarningToastForActualfinish,7200);
                        gantt.getTask(state.id).actual_finish = initial_actual_finish;
                        gantt.getTask(state.id).start_date = actual_stdate; 
                        gantt.getTask(state.id).end_date = actual_enddate;
                        gantt.getTask(state.id).progress = 3;
                   }
                }
            
           if(state.columnName == "progress")
            {
                // update progress as 100%,actual_finish update with end_date
                if(gantt.getTask(state.id).progress == 1)
                {
                    gantt.getTask(state.id).actual_finish = gantt.getTask(state.id).end_date;
                    gantt.getTask(state.id).actual_finish = gantt.date.add(gantt.getTask(state.id).end_date, -1, gantt.config.duration_unit);
                } 
                else
                {
                    //update progress rather than 100%, make actual_finish update with 'N/A'
                    gantt.getTask(state.id).actual_finish ='N/A';
                 }
           }
            
            task = gantt.getTask(state.id);
             /* // var startdt = gantt.date.date_part(new Date(startdate));
             var startdt = new Date(startdate);
             var localTime = startdt.getTime();
             var localOffset = startdt.getTimezoneOffset() * 60000;
             var utc = localTime + localOffset;
             var offset = 5.5;   
             var bombay = utc + (3600000*offset);
             startdt = new Date(bombay);

            var enddate11 = gantt.date.date_part(new Date(startdate));*/
             var startdt = gantt.date.convert_to_utc(new Date(startdate));
            
            var enddate11 = gantt.date.convert_to_utc(new Date(startdate));
            
            enddate11.setDate(enddate11.getDate()+initial_duration);
         if(state.columnName == "predecessors")
         {
              if((state.newValue == null || state.newValue =='')&& (task.actual_finish == null || task.actual_finish =='' || task.actual_finish =='N/A' || task.actual_finish == undefined))
             {
                 gantt.getTask(state.id).start_date = startdt;
                   gantt.getTask(state.id).duration = initial_duration;
                    task.end_date  = gantt.calculateEndDate({start_date: startdt, duration: initial_duration});
                 }
             // if actual_finish is not null(progress is 100%) , predecessors should not change
                  if(gantt.getTask(state.id).actual_finish != null && gantt.getTask(state.id).actual_finish != '' && gantt.getTask(state.id).actual_finish != undefined && gantt.getTask(state.id).actual_finish != 'N/A')
                  {
                      
                      gantt.getTask(state.id).predecessors =initial_predecessor
                  }
                  else
                  {
                      gantt.getTask(state.id).predecessors = gantt.getTask(state.id).predecessors;
                  }
             
         }
              
           
           if (state.columnName == "predecessors")
           {
               TaskDelete = 'true';
               
               var predoldvalue = state.oldValue;
               var prevPredVal ='';
                var task = gantt.getTask(state.id);
                var new_linked_ids = [];
            var predecessors_array = [];
            //alert('task.predecessors>>>'+task.predecessors);
            if (task.predecessors) predecessors_array = task.predecessors.split(",");
            var new_link =[];
            var link_type;
            var myString;
            for (var j = 0; j < predecessors_array.length; j++) {
                myString = predecessors_array[j];
                //alert('myString>>>'+myString);
                myString = myString.replace(/(?![+-]?\d*\.?\d+|e[+-]\d+)[^0-9]/g,'');
                
                var resmystring;
                if(myString.includes("+"))
                {
                    myString = myString.split("+");
                    myString = myString[0];
                    
                }
                
                else if(myString.includes("-"))
                {
                    myString = myString.split("-");
                    myString = myString[0];
                }
                
                
                //var new_linked = parseFloat(predecessors_array[j]);
                link_type = parse_link_type(predecessors_array[j]);
                
                for(var k = 0; k < savelist.length; k++)
                {
                    
                    
                    if(savelist[k].RowNum == myString && savelist[k].id != null)
                    {
                        //alert('inside if>>>>>>>>');
                        new_linked_ids1 =savelist[k].id;
                        new_linked_ids.push(new_linked_ids1);
                    }
                    
                    else if(savelist[k].RowNum == myString)
                    {
                        //alert('inside else if>>>>>>>>');
                        // alert('savelist[k].projId>>>'+savelist[k].projId);
                        new_linked_ids1 = savelist[k].projId ;
                        new_linked_ids.push(new_linked_ids1);
                        
                    }
                    
                }
            }
            var links = task.$target;
            var obsolete_links = [];
            var valid_link = 0;
            //looking for obsolete links
              
                   
                   for(var i = 0; i < links.length; i++){
                       //alert('inside onsavebox');
                       var obsolete_controller = 1;
                       var link = gantt.getLink(links[i]);
                       if (link.source){
                           var temp_task = gantt.getTask(link.source);
                           if (temp_task) {
                               var pred = gantt.getTask(link.source).id
                               for (var K = 0; K < new_linked_ids.length; K++) {
                                   if (new_linked_ids[k] == pred) obsolete_controller = 0;
                               }
                           }
                           if (obsolete_controller) obsolete_links.push(link.id)
                               }
                   }
               
               //delete all obsolete links
            
            
            for (var i = 0; i < obsolete_links.length; i++) 
            {
                gantt.deleteLink(obsolete_links[i]);
            }
            
            var new_link1 =[];
            var predecessors_array1 = [];
            if (task.predecessors) predecessors_array1 = task.predecessors.split(",");
            for (var m = 0; m < predecessors_array1.length; m++) {
                // var predecessor_id = parseFloat(predecessors_array1[m]);
                var resmyString;
                resmyString = predecessors_array1[m];
                
                resmyString = resmyString.replace(/(?![+-]?\d*\.?\d+|e[+-]\d+)[^0-9]/g,'');
                
                if(resmyString.includes("+"))
                {
                    
                    resmyString = resmyString.split("+");
                    resmyString = resmyString[0];
                    
                    
                }
                
                else if(resmyString.includes("-"))
                {
                    
                    resmyString = resmyString.split("-");
                    resmyString = resmyString[0];
                    
                }
                var poslag;
                var neglag;
                if(predecessors_array1[m].includes("+"))
                {
                    
                    poslag = predecessors_array1[m].split("+");
                }
                else if(predecessors_array1[m].includes("-"))
                {
                    
                    neglag = predecessors_array1[m].split("-");
                    
                }
                var LagSign;
                
                if(neglag !=null && neglag != 'undefined' && neglag != ''){
                    var naglagval = parseInt(neglag[1]);
                    if(naglagval == 0)
                    {
                        naglagval = naglagval;
                    }
                    else{
                        naglagval = '-'+naglagval;
                        
                    }
                    //alert('naglagval>>>>'+naglagval);
                    
                    LagSign = naglagval;
                    
                }
                
                
                if(poslag !=null && poslag != 'undefined' && poslag != ''){
                    
                    var poslagval = parseInt(poslag[1]);
                    //poslagval ='+'+poslagval;
                    LagSign = poslagval;
                }
                
                
                var lagres;
                if(isNaN(LagSign)){
                    lagres = 0; 
                    //lagres = '+'+0;
                }else{
                    
                    lagres = LagSign;
                    
                }
                //alert('lagres>>>>>'+lagres);
                
                
                for(var l = 0; l < savelist.length; l++)
                {
                    if(savelist[l].RowNum == myString && savelist[l].id != null)
                    {
                        
                        var source=savelist[l].id;
                        
                    }
                    
                    else if(savelist[l].RowNum == resmyString)
                    {
                        //alert('create inside else if>>>>>>>>');
                        // alert('create insidesavelist[k].projId>>>'+savelist[l].projId);
                        var source=savelist[l].projId;
                    }
                }
                
                var link_type = parse_link_type(predecessors_array1[m]);
                 var ParentId = gantt.getParent(task.id);
                 if(source == task.id || source == null || source =='' || source == undefined)
                {
                   task.predecessors = predoldvalue;
                     prevPredVal = task.predecessors;
                    document.getElementById("warningToastForPred1").style.display = 'block';
                    setTimeout(closewarningToastForPred1,7200);
                   
                     var predecessors_array_Parent = [];
                     if(prevPredVal) predecessors_array_Parent = prevPredVal.split(",");
                      for (var PP = 0; PP < predecessors_array_Parent.length; PP++) 
                      {
                          var PredString;
                          PredString = predecessors_array_Parent[PP];
                          PredString = PredString.replace(/(?![+-]?\d*\.?\d+|e[+-]\d+)[^0-9]/g,'');
                          if(PredString.includes("+"))
                          {
                              
                              PredString = PredString.split("+");
                              PredString = PredString[0];
                              
                              
                          }
                          
                          else if(PredString.includes("-"))
                          {
                              
                              PredString = PredString.split("-");
                              PredString = PredString[0];
                              
                          }
                          var PPposlag;
                          var PPneglag;
                          if(predecessors_array_Parent[PP].includes("+"))
                          {
                              
                              PPposlag = predecessors_array_Parent[PP].split("+");
                          }
                          else if(predecessors_array_Parent[PP].includes("-"))
                          {
                              
                              PPneglag = predecessors_array_Parent[PP].split("-");
                              
                          }
                          var PPLagSign;
                          if(PPneglag !=null && PPneglag != 'undefined' && PPneglag != ''){
                              var PPnaglagval = parseInt(neglag[1]);
                              if(PPnaglagval == 0)
                              {
                                  PPnaglagval = PPnaglagval;
                              }
                              else{
                                  PPnaglagval = '-'+PPnaglagval;
                                  
                              }
                              //alert('naglagval>>>>'+naglagval);
                              
                              PPLagSign = PPnaglagval;
                              
                          }
                          
                          if(PPposlag !=null && PPposlag != 'undefined' && PPposlag != ''){
                              
                              var PPposlagval = parseInt(PPposlag[1]);
                              //poslagval ='+'+poslagval;
                              PPLagSign = PPposlagval;
                          }
                          
                          //var lagres;
                          if(isNaN(PPLagSign)){
                              lagres = 0; 
                              //lagres = '+'+0;
                          }
                          else{
                              
                              lagres = PPLagSign;
                              
                          }
                          for(var l = 0; l < savelist.length; l++)
                          {
                              if(savelist[l].RowNum == PredString && savelist[l].id != null)
                              {
                                  
                                  var source=savelist[l].id;
                                  
                              }
                              
                              else if(savelist[l].RowNum == PredString)
                              {
                                  //alert('create inside else if>>>>>>>>');
                                  // alert('create insidesavelist[k].projId>>>'+savelist[l].projId);
                                  var source=tasklist[l].projId;
                              }
                          }
                          var link_type = parse_link_type(predecessors_array_Parent[PP]);
                         
                       }
                        
               
                }
                else if( source == null || source =='' || source == undefined)
                    {
                        document.getElementById("warningToastForPred2").style.display = 'block';
                        //gantt.hideLightbox();
                        setTimeout(closewarningToastForPred2,2200); 
                        return false
                    }
                else if(source == ParentId)
                 {
                    
                     task.predecessors = predoldvalue;
                     prevPredVal = task.predecessors;
                     
                    document.getElementById("warningToastForPred").style.display = 'block';
                    setTimeout(closewarningToastForPred,7200);
                     var predecessors_array_Parent = [];
                     if(prevPredVal) predecessors_array_Parent = prevPredVal.split(",");
                      for (var PP = 0; PP < predecessors_array_Parent.length; PP++) 
                      {
                          var PredString;
                          PredString = predecessors_array_Parent[PP];
                          PredString = PredString.replace(/(?![+-]?\d*\.?\d+|e[+-]\d+)[^0-9]/g,'');
                          if(PredString.includes("+"))
                          {
                              
                              PredString = PredString.split("+");
                              PredString = PredString[0];
                              
                              
                          }
                          
                          else if(PredString.includes("-"))
                          {
                              
                              PredString = PredString.split("-");
                              PredString = PredString[0];
                              
                          }
                          var PPposlag;
                          var PPneglag;
                          if(predecessors_array_Parent[PP].includes("+"))
                          {
                              
                              PPposlag = predecessors_array_Parent[PP].split("+");
                          }
                          else if(predecessors_array_Parent[PP].includes("-"))
                          {
                              
                              PPneglag = predecessors_array_Parent[PP].split("-");
                              
                          }
                          var PPLagSign;
                          if(PPneglag !=null && PPneglag != 'undefined' && PPneglag != ''){
                              var PPnaglagval = parseInt(neglag[1]);
                              if(PPnaglagval == 0)
                              {
                                  PPnaglagval = PPnaglagval;
                              }
                              else{
                                  PPnaglagval = '-'+PPnaglagval;
                                  
                              }
                              //alert('naglagval>>>>'+naglagval);
                              
                              PPLagSign = PPnaglagval;
                              
                          }
                          
                          if(PPposlag !=null && PPposlag != 'undefined' && PPposlag != ''){
                              
                              var PPposlagval = parseInt(PPposlag[1]);
                              //poslagval ='+'+poslagval;
                              PPLagSign = PPposlagval;
                          }
                          
                          //var lagres;
                          if(isNaN(PPLagSign)){
                              lagres = 0; 
                              //lagres = '+'+0;
                          }
                          else{
                              
                              lagres = PPLagSign;
                              
                          }
                          for(var l = 0; l < savelist.length; l++)
                          {
                              if(savelist[l].RowNum == PredString && savelist[l].id != null)
                              {
                                  
                                  var source=savelist[l].id;
                                  
                              }
                              
                              else if(savelist[l].RowNum == PredString)
                              {
                                  //alert('create inside else if>>>>>>>>');
                                  // alert('create insidesavelist[k].projId>>>'+savelist[l].projId);
                                  var source=savelist[l].projId;
                              }
                          }
                          var link_type = parse_link_type(predecessors_array_Parent[PP]);
                         
                       }
                        
                     
                     //return false;    
                 }
                
              
                var new_link1 = { source: source, target: task.id, type: link_type,lag:lagres} 
               
                gantt.addLink(new_link1);
            }
               
               }
            gantt.updateTask(state.id);
               gantt.autoSchedule(state.id);

                gantt.render();
            
        });

        
        //gantt.init("gantt_here");
        var tasks = gantt.getTaskByTime();
        
        gantt.config.open_tree_initially = true;        
        document.getElementById("spinner").style.display = "none";
        
        function savechart(flagval)
        {
            var saveflag = flagval;
            var tasks = gantt.getTaskByTime();
            console.log('tasks11111111111111>>>>>'+JSON.stringify(tasks));
            //alert('tasks11111111111111>>>>>'+JSON.stringify(tasks.length));
            if(tasks.length != 0 )
            {
                //alert('inside if');
            var predvalues = '';
            var statusvalues = '';
            var typevalues = '';
            var linkidvalues = '';
            var resvalues = '';
            var rolvalues = '';
            var linkvalues = [];
            var resource = [];
            //var rolearr = [];
            for(var i=0;i < tasks.length; i++)  //looping through the tasks
            {
                //var rowNumber = i+1;
                var target = tasks[i].$target;
                var source = tasks[i].$source;
                var labels = [];
                var linktypes = [];
                var linkid = [];
                var res = tasks[i].owner_id;
                var rol = tasks[i].role;
                var prog = tasks[i].progress;
                console.log(i+'rec:::'+JSON.stringify(res));
                console.log(i+'prog::'+JSON.stringify(prog));
                resource.push(res);
                for(var j = 0; j < target.length; j++)  //looping to get multiple predecessors
                {
                    var link = gantt.getLink(target[j]);
                    //console.log(i+' link:::'+JSON.stringify(link));
                    //console.log(i+' link id:::'+link.id);
                    var pred = gantt.getTask(link.source); 
                    var pred1 = gantt.getTask(link.target);//getting the predecessors
                    console.log(i+' pred:::'+JSON.stringify(pred));
                    var typ = link.type;
                    var lag = link.lag;
                    if(typ == 0){
                        typedup = 'FS';
                    }
                    else if(typ == 1){
                        typedup = 'SS';
                    }
                        else if(typ == 2){
                            typedup = 'FF';
                        }
                            else if(typ == 3){
                                typedup = 'SF';
                            }
                    var sign;
                    if(lag >= 0){
                        sign ='+';
                    }
                    else{
                        sign ='-';  
                    }
                    var index = pred.$index;
                    index = index+1;
                    
                    if(lag == null || lag == '' || lag == undefined)
                    {
                        labels.push(gantt.getTaskNumber(pred)+typedup);
                    }
                    else
                    { 
                        labels.push(gantt.getTaskNumber(pred)+typedup+sign+lag+'days');
                    }
                    //labels.push(gantt.getWBSCode(pred));    //getting WBS of the predecessors
                    
                    linktypes.push(link.type);  //to get type
                    //alert('labels'+JSON.stringify(labels));
                    linkid.push(link.id);   //to get link
                    
                    linkvalues.push(link);    //feature inprogress
                }
                if(typeof labels !== 'undefined' && labels.length > 0)  //to filter out empty labels
                {
                    tasks[i].predecessors = labels.join(",");
                    var value = '{'+tasks[i].id + '=' + labels.join(",")+'},';  //to create string format of predecessor
                    predvalues+=value;              //adding final value to the array to sent to apex
                }
                //for type
                if(typeof linktypes !== 'undefined' && linktypes.length > 0)  //to filter out empty linktypes
                {
                    var value = '{'+tasks[i].id + '=' + linktypes.join(",")+'},';
                    typevalues+=value;              //adding final type values to the array to sent to apex
                }
                //for link id
                if(typeof linkid !== 'undefined' && linkid.length > 0)  //to filter out empty linkids
                {
                    var value = '{'+tasks[i].id + '=' + linkid.join(",")+'},';
                    linkidvalues+=value;              //adding final linkids to the array to sent to apex
                }
                
                //for resource
                /*    for(var j = 0; j < resource.length; j++)  //looping to get multiple resource
                {
                    if(typeof resource !== 'undefined' && resource.length > 0)  
                    {
                        var value = '{'+tasks[i].id + '=' + resource.join(",")+'},';
                        resvalues += value;             
                    }
                }
                */
                // var trgprgrss = task.progress || 0;   //to get status
                //var tempstatus = '{'+tasks[i].id + '=' + Math.floor(trgprgrss * 100) + '},';    //to create string format of status
               if(prog !== undefined && prog != null && prog !='')  
               {
                var progress = prog;
                var progressStr = progress.toString();
                if(progressStr.indexOf('0.')> -1){
                  progress = progress*100
                }else{
                  tasks[i].progress = progress/100;
                }
                tasks[i].progress = Math.round(progress);
            }
                
                }
            var links = gantt.serialize().links;  //returns all links
            //alert('links>>>>>'+JSON.stringify(deletelinkvalues));
            for(var li=0;li<links.length; li++){                              //goes over all links
                var linkId = links[li].id;
                console.log('linkId>>>>'+linkId);
            };
            
            console.log('tasks'+JSON.stringify(tasks));
            console.log('predvalues'+JSON.stringify(predvalues));
            console.log('statusvalues'+JSON.stringify(statusvalues));
            console.log('typevalues'+JSON.stringify(typevalues));
            console.log('linkidvalues'+JSON.stringify(linkidvalues));
            console.log('linkvalues'+JSON.stringify(linkvalues));
            console.log('resvalues'+JSON.stringify(resvalues));
                var UpdateList = [];
                var insertList = [];
                for(var tsk =0; tsk<tasks.length; tsk++){
                    var rowNumber = tsk+1;
                    var src = '';
                    var target = '';
                    var linkId = '';
                    var taskobj = {};
                    //taskobj['sobjectType'] = 'Project_Task__c';
                    if(tasks[tsk].sfdcid != null && tasks[tsk].sfdcid != 'undefined'&& tasks[tsk].sfdcid != ''){
                        taskobj['sfdcid'] = tasks[tsk].sfdcid;
                        }
                    
                    if(tasks[tsk].actual_finish == 'N/A'){
                      tasks[tsk].actual_finish = null;
                    }
                    taskobj['sigmaerpdev2__Actual_Finish__c'] = formatDate(tasks[tsk].actual_finish);
                    taskobj['sigmaerpdev2__Project_Task_Id__c'] = tasks[tsk].id;
                    taskobj['sigmaerpdev2__WBS_Code__c'] = tasks[tsk].$wbs;
                    taskobj['sigmaerpdev2__Project_Task_Name__c'] = tasks[tsk].text;
                    taskobj['sigmaerpdev2__Start_Date__c'] = formatDate(tasks[tsk].start_date);
                    taskobj['sigmaerpdev2__End_Date__c'] = formatDate(tasks[tsk].end_date);
                    taskobj['sigmaerpdev2__Duration__c'] = tasks[tsk].duration;
                    taskobj['sigmaerpdev2__priority__c'] = tasks[tsk].priority;
                    taskobj['sigmaerpdev2__predecessors__c'] = tasks[tsk].predecessors;
                    taskobj['sigmaerpdev2__Project_Type__c'] = tasks[tsk].$rendered_type;
                    taskobj['sigmaerpdev2__Resource_Id__c'] = splitArraytoString(tasks[tsk].owner_id);
                    taskobj['sigmaerpdev2__Checked__c'] = tasks[tsk].checked;
                    taskobj['sigmaerpdev2__Progress__c'] = tasks[tsk].progress;
                    taskobj['sigmaerpdev2__Notes__c'] = tasks[tsk].Notes;
                    taskobj['sigmaerpdev2__Dashboard__c'] = tasks[tsk].dashboard;
                    taskobj['sigmaerpdev2__Mark_as_Milestone__c'] = spitMileStone(tasks[tsk].split);
                    taskobj['sigmaerpdev2__Parent__c'] = tasks[tsk].parent;
                    taskobj['sigmaerpdev2__Row_Number__c'] = rowNumber;
                    //taskobj['sfdcid'] = tasks[tsk].sfdcid;
                    if(linkvalues.length>0){
                        for(var lnk =0; lnk<linkvalues.length; lnk++){
                            if(tasks[tsk].id == linkvalues[lnk].source){
                                taskobj['sigmaerpdev2__source__c'] = tasks[tsk].id;
                                if(taskobj['sigmaerpdev2__target__c'] == null || taskobj['sigmaerpdev2__target__c'] == undefined || taskobj['target__c'] == ''){
                                    taskobj['sigmaerpdev2__target__c'] = linkvalues[lnk].target;
                                }else{
                                    taskobj['sigmaerpdev2__target__c'] = taskobj['sigmaerpdev2__target__c']+','+linkvalues[lnk].target;
                                }
                                if(taskobj['sigmaerpdev2__linkId__c'] == null || taskobj['sigmaerpdev2__linkId__c'] == undefined || taskobj['sigmaerpdev2__linkId__c'] == ''){
                                    taskobj['sigmaerpdev2__linkId__c'] = linkvalues[lnk].id;
                                }else{
                                    taskobj['sigmaerpdev2__linkId__c'] = taskobj['sigmaerpdev2__linkId__c']+','+linkvalues[lnk].id;
                                }
                                if(taskobj['sigmaerpdev2__lag__c'] == null || taskobj['sigmaerpdev2__lag__c'] == undefined || taskobj['sigmaerpdev2__lag__c'] == ''){
                                    taskobj['sigmaerpdev2__lag__c'] = checkLag(linkvalues[lnk].lag);
                                }else{
                                    taskobj['sigmaerpdev2__lag__c'] = taskobj['sigmaerpdev2__lag__c']+','+checkLag(linkvalues[lnk].lag);
                                }
                                if(taskobj['sigmaerpdev2__type__c'] == null || taskobj['sigmaerpdev2__type__c'] == undefined || taskobj['sigmaerpdev2__type__c'] == ''){
                                    taskobj['sigmaerpdev2__type__c'] = linkvalues[lnk].type;
                                }else{
                                    taskobj['sigmaerpdev2__type__c'] = taskobj['sigmaerpdev2__type__c']+','+linkvalues[lnk].type;
                                }
                            }
                        }
                    }
                    insertList.push(JSON.stringify(taskobj));
					console.log('insertList>>'+insertList);
                }
                function splitArraytoString(arrVal){
                  return arrVal.join();
                }
                function formatDate(dateVal){
                    var dtVal;
                    if(dateVal != null && dateVal != undefined){
                        var month = dateVal.getMonth()+1;
                        month =month.toString();
                        var day =dateVal.getDate().toString();
                        var year = dateVal.getFullYear().toString();
                        if(month.length ==1){ 
                            month = '0'+month;
                        }
                        if(month.length ==1){ 
                            day = '0'+dateVal.getDate();
                        }
                        dtVal = year+'-'+month+'-'+day;
                    }else{
                            dtVal = null;
                    }
                    return dtVal;
                }
                function checkLag(lagval){
                 if(lagval == null || lagval == undefined || lagval ==''){
                   lagval = 0;
                   return lagval.toString();
                 }else{
                   return lagval;
                 }
                }
                /* function spitMileStone(milestoneval){
                    var ismilestone =false
                    if (typeof milestoneval === "boolean"){
                        ismilestone = milestoneval
                        return ismilestone;
                    }else{

                     var milestone = JSON.parse(milestoneval);
                        if(milestone == true){
                            ismilestone = milestone;
                            }
                        else{
                            ismilestone = milestone[0];
                              }
                        return ismilestone;
                    }
                }*/
                function spitMileStone(milestoneval){
                    if(milestoneval == 'null' || milestoneval == 'undefined' || milestoneval=='' || milestoneval==[])
                    {
                        milestoneval = false
                        }
                   var ismilestone =false
                   if (typeof milestoneval === "boolean"){
                       ismilestone = milestoneval
                       return ismilestone;
                   }else{

                    var milestone = JSON.parse(milestoneval);
                       if(milestone == true){
                           ismilestone = milestone;
                           }
                       else{
                           ismilestone = milestone[0];
                             }
                       return ismilestone;
                   }
               }
                //callapex(JSON.stringify(tasks),JSON.stringify(predvalues),JSON.stringify(statusvalues),JSON.stringify(typevalues),JSON.stringify(linkidvalues),JSON.stringify(linkvalues),JSON.stringify(deletetaskvalues),JSON.stringify(resvalues));
                Visualforce.remoting.timeout = 120000;
                Visualforce.remoting.Manager.invokeAction(
                    '{!$RemoteAction.ganttcontroller.callToSetSelectedFieldsFunc}',
                    insertList,'{!currentRecordId}',deletetaskvalues,false,
                    function(result, event){
                    if (event.status) {
                            if(saveflag == 'issavetrue')
                            {
                               if(!event.result.isSuccess){
                                    document.getElementById("failHeader").style.display = 'block'; 
                                    document.getElementById("failHeader").innerHTML = event.result.ErrorMsg;
                                    document.getElementById("failTemplateHeader").style.display = 'none';   
                                    document.getElementById("failureToast").style.display = 'block';
                                   //setTimeout(reload,700);
                                }else{
                                    document.getElementById("saveHeader").style.display = 'block';  
                                    document.getElementById("saveTemplateHeader").style.display = 'none';   
                                    document.getElementById("succesToast").style.display = 'block';
                                    setTimeout(reload,700);
                                } 
                            }
                            else if(saveflag == 'issaveandclose')
                            {
                                document.getElementById("saveHeader").style.display = 'block';  
                                document.getElementById("saveTemplateHeader").style.display = 'none';   
                                document.getElementById("succesToast").style.display = 'block'; 
                                setTimeout(back,700);
                            }
                        } else if (event.type === 'exception') { 
                            //alert('something went wrong contact system admin ');
                            document.getElementById("failHeader").style.display = 'block';  
                            document.getElementById("failTemplateHeader").style.display = 'none';   
                            document.getElementById("failureToast").style.display = 'block';
                            setTimeout(back,700);
                        } else {
                            document.getElementById("failHeader").style.display = 'block';  
                            document.getElementById("failTemplateHeader").style.display = 'none';   
                            document.getElementById("failureToast").style.display = 'block';
                            setTimeout(back,700);
                            
                            //alert('something went wrong contact system admin ');
                        }
                    }, 
                    {buffer:false ,escape: true,timeout: 120000}
        );
            document.getElementById("spinner").style.display = "block";
            }
            else
            {
                document.getElementById("warningToastwithnotask").style.display = 'block';
                setTimeout(closewarningToastFornotask,5200);
            }
        }
        
        
        function modal(foo)
        {
            //alert('inside modelll::'+tempflag);
            if(tempflag == true)
                {
                    //alert('inside true');
                    document.getElementById("modal").style.display = 'none';
                }
            else
                {
                document.getElementById("modal").style.display = 'block';
                }
           
        }
        function cancel()
        {
            document.getElementById("modal").style.display = 'none';
        }
        function back()
        {     
            window.parent.location.href = '/'+'{!sigmaerpdev2__Project2__c.id}';
            //history.back();
        }
        function reload()
        {       
            window.location.reload();
        }
        /*function save()
        {
            document.getElementById("spinner").style.display = "none";
            document.getElementById("saveTemplateHeader").style.display = 'block';  
            document.getElementById("saveHeader").style.display = 'none';   
            document.getElementById("succesToast").style.display = 'block';
            
        }
        function saveSuccess()
        {
            document.getElementById("saveHeader").style.display = 'block';  
            document.getElementById("saveTemplateHeader").style.display = 'none';   
            document.getElementById("succesToast").style.display = 'block'; 
            //setTimeout(reload,7000);
        }
        function save_close_Success()
        {            
            document.getElementById("saveHeader").style.display = 'block';  
            document.getElementById("saveTemplateHeader").style.display = 'none';   
            document.getElementById("succesToast").style.display = 'block'; 
            setTimeout(back,700);     
        }
    */        
        
        function closewarningToast()
        {
            document.getElementById("warningToast").style.display = "none";
        }
        function closewarningText()
        {
            document.getElementById("warningToastFortext").style.display = "none";
        }
        function closewarningres()
        {
            document.getElementById("warningToastForres").style.display = "none";
        }
        function closewarningtempname()
        {
            document.getElementById("ErrorToasttempname").style.display = "none";
        }
        function closewarningToastForPred()
        {
            document.getElementById("warningToastForPred").style.display = 'none'; 
        }
        function closewarningToastForPred1()
        {
            document.getElementById("warningToastForPred1").style.display = 'none'; 
        }
        function closewarningToastForPred2()
        {
            document.getElementById("warningToastForPred2").style.display = 'none'; 
        }
         function closewarningToastForActualfinish()
        {
            document.getElementById("warningToastForActualfinish").style.display = 'none'; 
        }
        function closewarningToastFornotask()
        {
            document.getElementById("warningToastwithnotask").style.display = 'none'; 
        }
         function closewarningToastwithnotask()
        {
            document.getElementById("warningToastwithnotask").style.display = 'none';
            document.getElementById("succesToast").style.display = 'none';
            
        }
        function closewarningToastsaveastemp()
        {
            document.getElementById("warningToastsaveastemp").style.display = 'none'; 
        }
        function closewarningnolib()
        {
            document.getElementById("NoLibraryToast").style.display = "none";
        }
       function saveTemplateSuccess()
        {
            // save as template flow 
           var teamplateteam;
            var templname=document.getElementById("text-input-id-1").value;
              console.log('templname>>'+templname);
            if(templname!='')
            {
               Visualforce.remoting.Manager.invokeAction(
                '{!$RemoteAction.ganttcontroller.calltemplateFunc}',
                templname,'{!currentRecordIdtemp}',
                function(result, event){
                    if (event.status) 
                    {
                        console.log('templname1>>'+templname);
                        if(event.result == null)
                        {  
                           console.log('if>>'+event.result);
                            document.getElementById("modal").style.display = 'none';
                            document.getElementById("ErrorToastsaveastemplate").style.display = 'block';
                            setTimeout(back,1000);
                        }
                        else
                        {
                            console.log('else>>'+event.result);
                            teamplateteam = event.result;
                            saveastemplatefunc(teamplateteam);
                        }
                    } else if (event.type === 'exception') { 
                        
                    } else {
                        
                    }
                }, 
                {buffer:false ,escape: true,timeout: 120000}
            ); 
            }
            else{
                document.getElementById("ErrorToasttempname").style.display = 'block';
                setTimeout(closewarningtempname,1000);
            }
            
            
        }
        function saveastemplatefunc(teamplateteam){
            //var tasks = gantt.getTaskByTime();
            var tasks = records;
            var projTeam = resourceArr ;
            var insertList = [];
            if(tasks.length != 0 )
            {
            for(var tsk =0; tsk<tasks.length; tsk++){
                var rowNumber = tsk+1;
                var src = '';
                var uniqueRole = [];
                var tskOwnerArr = tasks[tsk].owner_id;
                var resourceIdVal = '';
                var tempSfId = '';
                var taskobj={};
                //tskOwnerArr = tskOwnerArr.split(',');
                if(tasks[tsk].actual_finish_date == 'N/A'){
                    tasks[tsk].actual_finish_date = null;
                }
                for(var prjTeam = 0; prjTeam<projTeam.length; prjTeam++){
                   if(tskOwnerArr.includes(projTeam[prjTeam].id)){
                       if(!uniqueRole.includes(projTeam[prjTeam].specialty)){
                          uniqueRole.push(projTeam[prjTeam].specialty);
                       }
                   }
                }
                for(var tempTeam in teamplateteam){
                    console.log('tempTeam>>'+tempTeam);
                    tempSfId = teamplateteam[tempTeam].sigmaerpdev2__Project2__c;
					console.log('tempSfId>>>'+tempSfId);
                   if(uniqueRole.includes(teamplateteam[tempTeam].sigmaerpdev2__Roles__c)){
                      if(resourceIdVal == null || resourceIdVal == undefined || resourceIdVal == ''){
                      resourceIdVal = teamplateteam[tempTeam].Id;
                      }else{
                       resourceIdVal = resourceIdVal+','+teamplateteam[tempTeam].Id;
                      }
                   }
                }
                console.log('tasks[tsk]>>>'+tasks[tsk]);
                console.log('tempSfId>>>'+tempSfId);
                taskobj['sigmaerpdev2__Actual_Finish__c'] = formatDate(tasks[tsk].actual_finish_date);
                taskobj['sigmaerpdev2__Project_Task_Id__c'] = tasks[tsk].projId;
                taskobj['sigmaerpdev2__WBS_Code__c'] = tasks[tsk].wbs;
                taskobj['sigmaerpdev2__Project_Task_Name__c'] = tasks[tsk].text;
                taskobj['sigmaerpdev2__Start_Date__c'] = formatDate(tasks[tsk].start_date);
                taskobj['sigmaerpdev2__End_Date__c'] = formatDate(tasks[tsk].end_date);
                taskobj['sigmaerpdev2__Duration__c'] = parseInt(tasks[tsk].Duration);
                taskobj['sigmaerpdev2__priority__c'] = tasks[tsk].priority;
                taskobj['sigmaerpdev2__predecessors__c'] = tasks[tsk].predecessor;
                taskobj['sigmaerpdev2__Project_Type__c'] = tasks[tsk].projtype;
                taskobj['sigmaerpdev2__Resource_Id__c'] = resourceIdVal;
                taskobj['sigmaerpdev2__Checked__c'] = tasks[tsk].checked;
                taskobj['sigmaerpdev2__Progress__c'] = parseInt(tasks[tsk].progress);
                taskobj['sigmaerpdev2__Notes__c'] = tasks[tsk].Notes;
                taskobj['sigmaerpdev2__Dashboard__c'] = tasks[tsk].dashboard;
                taskobj['sigmaerpdev2__Mark_as_Milestone__c'] = spitMileStone(tasks[tsk].split);
                taskobj['sigmaerpdev2__Parent__c'] = tasks[tsk].parentid;
                taskobj['sigmaerpdev2__Row_Number__c'] = rowNumber;
                taskobj['sigmaerpdev2__source__c'] = tasks[tsk].source;
                taskobj['sigmaerpdev2__target__c'] = tasks[tsk].target;
                taskobj['sigmaerpdev2__linkId__c'] = tasks[tsk].linkid;
                taskobj['sigmaerpdev2__lag__c'] = tasks[tsk].lag;
                taskobj['sigmaerpdev2__type__c'] = tasks[tsk].type;
                taskobj['sfdcid'] = tempSfId;
                insertList.push(JSON.stringify(taskobj));
                }
                }
                function spitMileStone(milestoneval){
                    if(milestoneval == 'null' || milestoneval == 'undefined' || milestoneval=='' || milestoneval==[])
                    {
                        milestoneval = false
                    }
                    var ismilestone =false
                    if (typeof milestoneval === "boolean"){
                        ismilestone = milestoneval
                        return ismilestone;
                    }else{
                        
                        var milestone = JSON.parse(milestoneval);
                        if(milestone == true){
                            ismilestone = milestone;
                        }
                        else{
                            ismilestone = milestone[0];
                        }
                        return ismilestone;
                    }
                }
                function formatDate(dateVal){
                    if(dateVal != null && dateVal != undefined && dateVal !=''){
                        var dateVal =  new Date(dateVal);
                        dateVal = dateVal.toISOString();
                        var dateArr = dateVal.split('T');
                        dateVal = dateArr[0]+'T00:00:00.000Z';
                        dateVal =  new Date(dateVal);                    
                    }else{
                        dateVal = null;
                    }
                    return dateVal;
                }
                function checkLag(lagval){
                    if(lagval == null || lagval == undefined || lagval ==''){
                        return 0;
                    }else{
                        return lagval;
                    }
                }
            Visualforce.remoting.Manager.invokeAction(
                '{!$RemoteAction.ganttcontroller.callToSetSelectedFieldsFunc}',
                insertList,'',deletetaskvalues,true,
                function(result, event){
                    // alert('current template Id >>>>>>'+JSON.stringify(result))
                    if (event.status) {
                        
                        if(!event.result.isSuccess){
                                    document.getElementById("failHeader").style.display = 'none'; 
                                    document.getElementById("failHeader").innerHTML = event.result.ErrorMsg;
                                    document.getElementById("failTemplateHeader").style.display = 'block'; 
                                    document.getElementById("failTemplateHeader").innerHTML = event.result.ErrorMsg;
                                    document.getElementById("failureToast").style.display = 'block';
                                    //setTimeout(back,700);
                                }else{
                                    document.getElementById("saveHeader").style.display = 'block';  
                                    document.getElementById("saveTemplateHeader").style.display = 'none';   
                                    document.getElementById("succesToast").style.display = 'block';
                                    window.parent.location.href = '/'+result.currenttemplateId;
                                    //setTimeout(back,700);
                                } 
                        } 
                    else if (event.type === 'exception') { 
                        document.getElementById("failHeader").style.display = 'none';  
                            document.getElementById("failTemplateHeader").style.display = 'block';   
                            document.getElementById("failureToast").style.display = 'block';
                            setTimeout(back,700);
                    } else {
                        
                    }
                }, 
                {buffer:false ,escape: true,timeout: 120000}
            );
            document.getElementById("spinner").style.display = "block";  
        }
        
        function showTemplateModal()
        {
            //alert('inside showTemplateModal::'+tempflag);
            if(tempflag == true)
                {
                    document.getElementById("modal").style.display = 'none';
                    document.getElementById("warningToastsaveastemp").style.display = 'block';
                    setTimeout(closewarningToastFornotask,5200);
                    //history.back();
                    //document.getElementById("modal").style.display = 'none';
                    
                    
                }
            else
                {
                    document.getElementById("modal").style.display = 'block';
                }
            
            
            
            //document.getElementById("modal").style.display = 'block'; 
        }
        function closeToast()
        {
            document.getElementById("succesToast").style.display = 'none';
            document.getElementById("modal").style.display = 'none';  
            history.back();
        }
        
        
        var menu = {
            undo: function(){
                gantt.undo();
            },
            redo: function(){
                gantt.redo();
            },
            zoomToFit: function(){
                toggleMode()
            },
            fullscreen: function(){
                
                if (!gantt.getState().fullscreen) {
                    // expanding the gantt to full screen
                    document.getElementById("gantt_here").style.height = '80%';
                    gantt.expand();
                }
                else {
                    // collapsing the gantt to the normal mode
                    document.getElementById("gantt_here").style.height = '70%';
                    gantt.collapse();
                }
                
            },
            collapseAll: function(){
                gantt.eachTask(function(task){
                    task.$open = false;
                });
                gantt.render();
            },
            expandAll: function(){
                gantt.eachTask(function(task){
                    task.$open = true;
                });
                gantt.render();
            },
            toggleAutoScheduling: function(){
                gantt.config.auto_scheduling = !gantt.config.auto_scheduling;
            },
            toggleDelete: function(){
                var selectedarray=[];
                gantt.batchUpdate(function () {
                    gantt.eachSelectedTask(function(task_id){
                        if(gantt.isTaskExists(task_id))
                            gantt.deleteTask(task_id);
                            console.log('task_id>>'+task_id);
                    });
                });
            },
            toggleCriticalPath: function(){
                gantt.config.highlight_critical_path = !gantt.config.highlight_critical_path;
                gantt.render();
            },
            toPDF: function(){
                gantt.exportToPDF();
            },
            toPNG: function(){
                gantt.exportToPNG();
            },
            toExcel: function(){
                gantt.exportToExcel();
            },
            toMSProject: function(){
                gantt.exportToMSProject();
            }
        };
        
        
        
        var navBar = document.querySelector(".gantt-controls");
        gantt.event(navBar, "click", function(e){
            var target = e.target || e.srcElement;
            while(!target.hasAttribute("data-action") && target !== document.body){
                target = target.parentNode;
            }
            
            if(target && target.hasAttribute("data-action")){
                var action = target.getAttribute("data-action");
                if(menu[action]){
                    menu[action]();
                }
            }
        });
        
        
        
        ///zoom to fit functionality:
        
        
        var toggle = false;
        function toggleMode() {
            toggle = !toggle;
            if (toggle) {
                saveConfig();
                zoomToFit();
            } else {
                //Restore previous scale state
                restoreConfig();
                gantt.render();
            }
        }
        
        var cachedSettings = {};
        
        function saveConfig() {
            var config = gantt.config;
            cachedSettings = {};
            cachedSettings.scale_unit = config.scale_unit;
            cachedSettings.date_scale = config.date_scale;
            cachedSettings.step = config.step;
            cachedSettings.subscales = config.subscales;
            cachedSettings.template = gantt.templates.date_scale;
            cachedSettings.start_date = config.start_date;
            cachedSettings.end_date = config.end_date;
        }
        
        function restoreConfig() {
            applyConfig(cachedSettings);
        }
        
        function applyConfig(config, dates) {
            gantt.config.scale_unit = config.scale_unit;
            if (config.date_scale) {
                gantt.config.date_scale = config.date_scale;
                gantt.templates.date_scale = null;
            }
            else {
                gantt.templates.date_scale = config.template;
            }
            
            gantt.config.step = config.step;
            gantt.config.subscales = config.subscales;
            
            if (dates) {
                gantt.config.start_date = gantt.date.add(dates.start_date, -1, config.unit);
                gantt.config.end_date = gantt.date.add(gantt.date[config.unit + "_start"](dates.end_date), 2, config.unit);
            } else {
                gantt.config.start_date = gantt.config.end_date = null;
            }
        }
        
        
        function zoomToFit() {
            var project = gantt.getSubtaskDates(),
                areaWidth = gantt.$task.offsetWidth;
            
            for (var i = 0; i < scaleConfigs.length; i++) {
                var columnCount = getUnitsBetween(project.start_date, project.end_date, scaleConfigs[i].unit, scaleConfigs[i].step);
                if ((columnCount + 2) * gantt.config.min_column_width <= areaWidth) {
                    break;
                }
            }
            
            if (i == scaleConfigs.length) {
                i--;
            }
            
            applyConfig(scaleConfigs[i], project);
            gantt.render();
        }
        
        // get number of columns in timeline
        function getUnitsBetween(from, to, unit, step) {
            var start = new Date(from),
                end = new Date(to);
            var units = 0;
            while (start.valueOf() < end.valueOf()) {
                units++;
                start = gantt.date.add(start, step, unit);
            }
            return units;
        }
        
        //Setting available scales
        var scaleConfigs = [
            // minutes
            {
                unit: "minute", step: 1, scale_unit: "hour", date_scale: "%H", subscales: [
                    {unit: "minute", step: 1, date: "%H:%i"}
                ]
            },
            // hours
            {
                unit: "hour", step: 1, scale_unit: "day", date_scale: "%j %M",
                subscales: [
                    {unit: "hour", step: 1, date: "%H:%i"}
                ]
            },
            // days
            {
                unit: "day", step: 1, scale_unit: "month", date_scale: "%F",
                subscales: [
                    {unit: "day", step: 1, date: "%j"}
                ]
            },
            // weeks
            {
                unit: "week", step: 1, scale_unit: "month", date_scale: "%F",
                subscales: [
                    {
                        unit: "week", step: 1, template: function (date) {
                            var dateToStr = gantt.date.date_to_str("%d %M");
                            var endDate = gantt.date.add(gantt.date.add(date, 1, "week"), -1, "day");
                            return dateToStr(date) + " - " + dateToStr(endDate);
                        }
                    }
                ]
            },
            // months
            {
                unit: "month", step: 1, scale_unit: "year", date_scale: "%Y",
                subscales: [
                    {unit: "month", step: 1, date: "%M"}
                ]
            },
            // quarters
            {
                unit: "month", step: 3, scale_unit: "year", date_scale: "%Y",
                subscales: [
                    {
                        unit: "month", step: 3, template: function (date) {
                            var dateToStr = gantt.date.date_to_str("%M");
                            var endDate = gantt.date.add(gantt.date.add(date, 3, "month"), -1, "day");
                            return dateToStr(date) + " - " + dateToStr(endDate);
                        }
                    }
                ]
            },
            // years
            {
                unit: "year", step: 1, scale_unit: "year", date_scale: "%Y",
                subscales: [
                    {
                        unit: "year", step: 5, template: function (date) {
                            var dateToStr = gantt.date.date_to_str("%Y");
                            var endDate = gantt.date.add(gantt.date.add(date, 5, "year"), -1, "day");
                            return dateToStr(date) + " - " + dateToStr(endDate);
                        }
                    }
                ]
            },
            // decades
            {
                unit: "year", step: 10, scale_unit: "year", template: function (date) {
                    var dateToStr = gantt.date.date_to_str("%Y");
                    var endDate = gantt.date.add(gantt.date.add(date, 10, "year"), -1, "day");
                    return dateToStr(date) + " - " + dateToStr(endDate);
                },
                subscales: [
                    {
                        unit: "year", step: 100, template: function (date) {
                            var dateToStr = gantt.date.date_to_str("%Y");
                            var endDate = gantt.date.add(gantt.date.add(date, 100, "year"), -1, "day");
                            return dateToStr(date) + " - " + dateToStr(endDate);
                        }
                    }
                ]
            }
        ];
        </script>
        
        <div id="modal" style="display:none;">
            <section role="dialog" tabindex="-1" aria-labelledby="modal-heading-01" aria-modal="true" aria-describedby="modal-content-id-1" class="slds-modal slds-fade-in-open">
                <div class="slds-modal__container slds-size_2-of-6">
                    <header class="slds-modal__header">
                        <button class="slds-button slds-button_icon slds-modal__close slds-button_icon-inverse" title="Close">          
                            <span class="slds-assistive-text">Close</span>
                        </button>
                        <h2 id="modal-heading-01" class="slds-text-heading_medium slds-hyphenate">Save as Template</h2>
                    </header>
                    <div class="slds-modal__content slds-p-around_medium" id="modal-content-id-1">
                        <div class="slds-form-element">
                            <label class="slds-form-element__label" for="text-input-id-1">Template Name</label>
                            <div class="slds-form-element__control">
                                <input id="text-input-id-1" placeholder="Please Enter Template Name" class="slds-input" type="text" value="{!templname}" />
                            </div>
                        </div>
                    </div>
                    <footer class="slds-modal__footer">
                        <button class="slds-button slds-button_neutral" onclick="cancel()">Cancel</button>
                        <button class="slds-button slds-button_brand" onclick="saveTemplateSuccess()">Save</button>
                    </footer>
                </div>
            </section>
            <div class="slds-backdrop slds-backdrop_open"></div>
        </div>
        
        <div id="succesToast" style="display:none;">
            <div class="slds-notify_container slds-is-fixed">
                <div class="slds-notify slds-notify_toast slds-theme_success" role="status">
                    <span class="slds-assistive-text">success</span>
                    <div class="slds-notify__content">
                        <h2 class="slds-text-heading_small" style="display:none;" id="saveTemplateHeader">Template has been created.</h2>
                        <h2 class="slds-text-heading_small" style="display:none;" id="saveHeader">Data has been saved successfully.</h2>
                    </div>
                    <div class="slds-notify__close">
                        <button class="slds-button slds-button_icon slds-button_icon-inverse" title="Close" onclick="closeToast()" style="font-size: 16px;font-weight: bold;">X
                            <span class="slds-assistive-text">Close</span>
                        </button>
                    </div>
                </div>
            </div>
        </div>
        <div id="failureToast" style="display:none;">
            <div class="slds-notify_container slds-is-fixed" style="word-break:break-all">
                <div class="slds-notify slds-notify_toast slds-theme_error" role="status">
                    <span class="slds-assistive-text">error</span>
                    <div class="slds-notify__content">
                         <h2 class="slds-text-heading_small" style="display:none;" id="failTemplateHeader">Template Creation failed.</h2>
                        <h2 class="slds-text-heading_small" style="display:none;" id="failHeader">Data Creation failed.</h2>
                    </div>
                    <div class="slds-notify__close">
                        <button class="slds-button slds-button_icon slds-button_icon-inverse" title="Close" onclick="closeToast()" style="font-size: 16px;font-weight: bold;">X
                            <span class="slds-assistive-text">Close</span>
                        </button>
                    </div>
                </div>
            </div>
        </div>
        <div id="warningToast" style="display:none;">
            <div class="slds-notify_container slds-is-fixed">
                <div class="slds-notify slds-notify_toast slds-theme_error" role="status">
                    <span class="slds-assistive-text">Warning</span>
                    
                    <div class="slds-notify__content">
                        <h2 class="slds-text-heading_small" >This task has not been saved into the database.</h2>
                    </div>
                    <div class="slds-notify__close">
                        <button class="slds-button slds-button_icon slds-button_icon-inverse" title="Close" onclick="closewarningToast()" style="font-size: 16px;font-weight: bold;">X
                            <span class="slds-assistive-text">Close</span>
                        </button>
                    </div>
                </div>
            </div>
        </div>
        <div id="warningToastForPred" style="display:none;">
            <div class="slds-notify_container slds-is-fixed" style ="">
                <div class="slds-notify slds-notify_toast slds-theme_error" role="status" style ="">
                    <span class="slds-assistive-text">Warning</span>
                    
                    <div class="slds-notify__content">
                        <h2 class="slds-text-heading_small" >Project cannot link a summary task to one it's subtask</h2>
                    </div>
                    <div class="slds-notify__close">
                        <button class="slds-button slds-button_icon slds-button_icon-inverse" title="Close" onclick="closewarningToastForPred()" style="font-size: 16px;font-weight: bold;">X
                            <span class="slds-assistive-text">Close</span>
                        </button>
                    </div>
                </div>
            </div>
        </div>
        <div id="warningToastForPred1" style="display:none;">
            <div class="slds-notify_container slds-is-fixed" style ="">
                <div class="slds-notify slds-notify_toast slds-theme_error" role="status" style ="">
                    <span class="slds-assistive-text">Warning</span>
                    
                    <div class="slds-notify__content">
                        <h2 class="slds-text-heading_small" >You cannt make a task a pedecessor of itself</h2>
                    </div>
                    <div class="slds-notify__close">
                        <button class="slds-button slds-button_icon slds-button_icon-inverse" title="Close" onclick="closewarningToastForPred1()" style="font-size: 16px;font-weight: bold;">X
                            <span class="slds-assistive-text">Close</span>
                        </button>
                    </div>
                </div>
            </div>
        </div>
        <div id="warningToastForPred2" style="display:none;">
            <div class="slds-notify_container slds-is-fixed" style ="">
                <div class="slds-notify slds-notify_toast slds-theme_error" role="status" style ="">
                    <span class="slds-assistive-text">Warning</span>
                    
                    <div class="slds-notify__content">
                        <h2 class="slds-text-heading_small" >Please Give Valid Predecessor</h2>
                    </div>
                    <div class="slds-notify__close">
                        <button class="slds-button slds-button_icon slds-button_icon-inverse" title="Close" onclick="closewarningToastForPred2()" style="font-size: 16px;font-weight: bold;">X
                            <span class="slds-assistive-text">Close</span>
                        </button>
                    </div>
                </div>
            </div>
        </div>
        <div id="warningToastForActualfinish" style="display:none;">
            <div class="slds-notify_container slds-is-fixed" style="">
                <div class="slds-notify slds-notify_toast slds-theme_error" role="status" style="">
                    <span class="slds-assistive-text">Warning</span>
                    
                    <div class="slds-notify__content">
                        <h2 class="slds-text-heading_small" >You cannot enter a future actual end date</h2>
                    </div>
                    <div class="slds-notify__close">
                        <button class="slds-button slds-button_icon slds-button_icon-inverse" title="Close" onclick="closewarningToastForActualfinish()" style="font-size: 16px;font-weight: bold;">X
                            <span class="slds-assistive-text">Close</span>
                        </button>
                    </div>
                </div>
            </div>
        </div>
            <div id="warningToastwithnotask" style="display:none;">
            <div class="slds-notify_container slds-is-fixed">
                <div class="slds-notify slds-notify_toast slds-theme_error" role="status">
                    <span class="slds-assistive-text">Warning</span>
                    
                    <div class="slds-notify__content">
                        <h2 class="slds-text-heading_small" >Add the task to saved into the database.</h2>
                    </div>
                    <div class="slds-notify__close">
                        <button class="slds-button slds-button_icon slds-button_icon-inverse" title="Close" onclick="closewarningToastwithnotask()" style="font-size: 16px;font-weight: bold;">X
                            <span class="slds-assistive-text">Close</span>
                        </button>
                    </div>
                </div>
            </div>
        </div>
        <div id="warningToastFortext" style="display:none;">
            <div class="slds-notify_container slds-is-fixed" style ="width:31%">
                <div class="slds-notify slds-notify_toast slds-theme_error" style ="min-width: 18rem; " role="status">
                    <span class="slds-assistive-text">Warning</span>
                    
                    <div class="slds-notify__content">
                        <h2 class="slds-text-heading_small" >Task Name Should not be empty</h2>
                    </div>
                    <div class="slds-notify__close">
                        <button class="slds-button slds-button_icon slds-button_icon-inverse" title="Close" onclick="closewarningText()" style="font-size: 16px;font-weight: bold;">X
                            <span class="slds-assistive-text">Close</span>
                        </button>
                    </div>
                </div>
            </div>
        </div>
        <div id="warningToastForres" style="display:none;">
            <div class="slds-notify_container slds-is-fixed" style ="">
                <div class="slds-notify slds-notify_toast slds-theme_error" style =" " role="status">
                    <span class="slds-assistive-text">Warning</span>
                    <apex:outputpanel rendered="{!Project2__c.Template__c == true}"> 
                    <div class="slds-notify__content">
                        <h2 class="slds-text-heading_small" >Role Should not be empty</h2>
                    </div>
                    </apex:outputpanel>
                    <apex:outputpanel rendered="{!Project2__c.Template__c == false}"> 
                    <div class="slds-notify__content">
                        <h2 class="slds-text-heading_small" >Resource Should not be empty</h2>
                    </div>
                    </apex:outputpanel>
                    
                    <div class="slds-notify__close">
                        <button class="slds-button slds-button_icon slds-button_icon-inverse" title="Close" onclick="closewarningres()" style="font-size: 16px;font-weight: bold;">X
                            <span class="slds-assistive-text">Close</span>
                        </button>
                    </div>
                </div>
            </div>
        </div>
        <div id="warningToastsaveastemp" style="display:none;">
            <div class="slds-notify_container slds-is-fixed">
                <div class="slds-notify slds-notify_toast slds-theme_error" role="status">
                    <span class="slds-assistive-text">Warning</span>
                    
                    <div class="slds-notify__content">
                        <h2 class="slds-text-heading_small" >Cannot Save a Template from another Template</h2>
                    </div>
                    <div class="slds-notify__close">
                        <button class="slds-button slds-button_icon slds-button_icon-inverse" title="Close" onclick="closewarningToastsaveastemp()" style="font-size: 16px;font-weight: bold;">X
                            <span class="slds-assistive-text">Close</span>
                        </button>
                    </div>
                </div>
            </div>
        </div>
        <div id="ErrorToastsaveastemplate" style="display:none;">
            <div class="slds-notify_container slds-is-fixed">
                <div class="slds-notify slds-notify_toast slds-theme_error" role="status">
                    <span class="slds-assistive-text">Warning</span>
                    
                    <div class="slds-notify__content">
                        <h2 class="slds-text-heading_small" >There is No Tasks in project to save as template</h2>
                    </div>
                    <div class="slds-notify__close">
                        <button class="slds-button slds-button_icon slds-button_icon-inverse" title="Close" onclick="closewarningToastsaveastemp()" style="font-size: 16px;font-weight: bold;">X
                            <span class="slds-assistive-text">Close</span>
                        </button>
                    </div>
                </div>
            </div>
        </div>
        <div id="ErrorToasttempname" style="display:none;">
            <div class="slds-notify_container slds-is-fixed">
                <div class="slds-notify slds-notify_toast slds-theme_error" role="status">
                    <span class="slds-assistive-text">Warning</span>
                    
                    <div class="slds-notify__content">
                        <h2 class="slds-text-heading_small" >Enter Template Name</h2>
                    </div>
                    <div class="slds-notify__close">
                        <button class="slds-button slds-button_icon slds-button_icon-inverse" title="Close" onclick="closewarningtempname()" style="font-size: 16px;font-weight: bold;">X
                            <span class="slds-assistive-text">Close</span>
                        </button>
                    </div>
                </div>
            </div>
        </div>
         <div id="NoLibraryToast" style="display:none;">
            <div class="slds-notify_container slds-is-fixed">
                <div class="slds-notify slds-notify_toast slds-theme_error" role="status">
                    <span class="slds-assistive-text">Warning</span>
                    
                    <div class="slds-notify__content">
                        <h2 class="slds-text-heading_small" >No gantt library found</h2>
                    </div>
                    <div class="slds-notify__close">
                        <button class="slds-button slds-button_icon slds-button_icon-inverse" title="Close" onclick="closewarningtempname()" style="font-size: 16px;font-weight: bold;">X
                            <span class="slds-assistive-text">Close</span>
                        </button>
                    </div>
                </div>
            </div>
        </div>
          <script type="text/javascript">
          var ganttvar = '{!GanttLibrary}';
         /*  if(ganttvar != '')
        {
             alert('inside if ');
        }
        else {
            //  alert('inside null');
                document.getElementById("NoLibraryToast").style.display = "block";
                setTimeout(closewarningnolib,5000);
            }*/
        if(ganttvar == '' || ganttvar == null || ganttvar == undefined)
        {
          document.getElementById("spinner").style.display = "block";
            document.getElementById("NoLibraryToast").style.display = "block";
            setTimeout(closewarningnolib,5000);
        }
         </script>
    </body>
</apex:page>